{
  "how-to-get-freelance-programming-work-using-tech-recruiters-part-2-pros-and-cons": {
    "id": "cG9zdDo2ODU=",
    "title": "How to Get Freelance Programming Work Using Tech Recruiters Part 2: Pros and Cons",
    "excerpt": "<p>This is part 2 of a multi-part series on working with tech recruiters and staffing agencies. In part one, we talked about the right times in your career to work with tech recruiters, and good mindsets to have when working with them. In this post, we’ll dive into some of the pros and cons to [&hellip;]</p>\n",
    "slug": "how-to-get-freelance-programming-work-using-tech-recruiters-part-2-pros-and-cons",
    "date": "2018-12-14T09:43:29",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/11/49160383_m.jpg",
        "altText": "Illustration of businessman being stretched apart by giant hands",
        "description": null,
        "sizes": "(max-width: 286px) 100vw, 286px",
        "srcSet": "/2018/11/49160383_m-286x300.jpg 286w, /2018/11/49160383_m-143x150.jpg 143w, /2018/11/49160383_m-768x805.jpg 768w, /2018/11/49160383_m-977x1024.jpg 977w, /2018/11/49160383_m-629x660.jpg 629w, /2018/11/49160383_m-381x400.jpg 381w, /2018/11/49160383_m-496x520.jpg 496w, /2018/11/49160383_m.jpg 2000w",
        "mediaDetails": {
          "height": 2097,
          "width": 2000
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>This is part 2 of a multi-part series on working with tech recruiters and staffing agencies.</p>\n<p>In <a href=\"http://cavalieredev.wpengine.com/how-to-get-freelance-programming-work-using-tech-recruiters-when-to-use-them/\">part one</a>, we talked about the right times in your career to work with tech recruiters, and good mindsets to have when working with them. In this post, we’ll dive into some of the pros and cons to consider when working with recruiters.<!--more--></p>\n<h2>Pro: the connections you don’t have</h2>\n<p>The whole premise of using a recruiter or headhunter for getting any type of job (freelance or otherwise) is <strong>connecting</strong>: recruiters have access to companies and individuals at those companies that you don’t have access to yet.</p>\n<p>Want to transition from the Fortune 500 world to the startup world? You could network your butt off, but that takes time. Find a recruiter that specializes in the startup world, and you could be working right away.</p>\n<p>What if your goal is to work at a specific company? You could cold email hiring managers at your target company, but you may have to email a bunch to get a response. Out of those emails, only some will respond. And only some of that batch will be looking for someone with your skillset. On the other hand, a recruiter who is helping that company hire someone like you will be able to connect you right away.</p>\n<p>You can do plenty of networking yourself, and you should, in general. But you can’t do it full-time while you’ve already got a job. It’s just not possible for most people without overworking themselves.</p>\n<p>For a recruiter, connections are their job. Having them connect you with a hiring manager is like paying someone to do your laundry. You could do it yourself, but do you want to do all that work right now? (And unlike hiring someone to do your laundry, a recruiter is going to make you money.)</p>\n<h2>Pro: they handle the boring stuff</h2>\n<p>As a freelance programmer you can opt to incorporate yourself, and in turn take on all the corporate taxes, invoicing, paying an insane amount for health insurance and so on. It’s a great experience, and there are many reasons to consider doing it, but it’s also a big pain in the butt.</p>\n<p>If you work for a staffing agency, they handle all the boring shit, including but not limited to:</p>\n<ul>\n<li><strong>Invoicing the client, and getting them to pay</strong> (which can be time-consuming when working directly for some clients &#8211; seriously).</li>\n<li><strong>Liability insurance.</strong> Some larger companies won’t let you consult directly for them without millions in liability coverage. You won’t have the money for this; staffing agencies will. It’s also a big reassurance since in the unlikely event of a bad lawsuit, losing your job is highly preferable to being sued and having your personal assets taken away.</li>\n<li><strong>Providing health insurance.</strong> Which is pretty freaking expensive otherwise.</li>\n<li><strong>Planning for tax season.</strong> With your own LLC, you’ll have to put aside money for the tax man. When working with a staffing agency, you’ll often be an employee of the agency (on a W-2). Which means you can opt to have taxes taken out with each paycheck instead of getting hit with a big bill in April, or paying a large sum every tax quarter.</li>\n</ul>\n<h2>Pro: options, options, options</h2>\n<p>Let’s say you’re a solid engineer looking for a new project. You might get random job offers, and you might manually apply to jobs. If you’re smart, you’ll do both. But sometimes it’s a numbers game to find the project you want. The more options you’ve got, the pickier you can be, and the happier you’ll be with the one that you pick.</p>\n<p>If you’ve got 100 job prospects without a recruiter, you could have 200 by talking to a few of them. It sure as hell can’t hurt. You may make less money when taking a job through a recruiter, but if they can connect you with a project you really want—sometimes it’s worth a temporary sacrifice. Moreover, after the project, you can move on and (often) charge more. More on this in part 3.</p>\n<h2>Pro: timing is everything</h2>\n<p>Sometimes getting work takes…well, work. If you just ended a project and are beginning to look for another one, chances are you won’t get one right away. Usually, for this reason, it’s good to start looking while you’re 2+ months away from the end of a project; but at that point in time, you’ll still be busy <em>working on the project itself</em>. Hunting for work has the potential to distract you from your current job.</p>\n<p>Recruiters have projects in the pipeline all the damn time, and they’re usually starting soon. Keep in mind that companies often use recruiters because either they’re having trouble finding the people they want to hire, or they just don’t have the time.</p>\n<p>In addition, if you’ve got relationships with a few recruiters, they’ll be bringing the work to you when they have something that fits—which will be all the time if you’re engaging with a few of them. That means you’ll be getting project offers the whole time you’re working on your current project, so you can focus on getting your work done instead of distracting yourself with job hunting.</p>\n<h2>Con: money off your back</h2>\n<p>This is a shocking realization for a lot of freelance developers who take their first consulting project through a staffing agency: they make money off your work. And sometimes, it’s a lot.</p>\n<p>Here’s an experience I had back around 2001: I was working at a client’s office for more than a year, through a staffing agency. I was making $45 per hour. I found out that the agency was charging the client about $140 per hour. That’s a 300% markup! What the f**k?</p>\n<p>This is the part I struggled with the most. Staffing agencies will connect you with work you couldn’t get as quickly or easily, and handle the paperwork for you. They deserve to make some money off of this. But 300%? For months at a time?</p>\n<p>Nowadays it still happens, only with higher stakes. Engineers make more, but companies can charge a whole lot more since clients pay more. I know of engineers who made $65/hour but got their work billed to the client at $230/hr.</p>\n<p>Agencies need to pay the bills too, so they need to make something off the services they provide: namely connecting companies with talent, and handling all the routine paperwork associated with it. However, there’s a point at which the markup is too severe, and the duration is too long to be worth it. In the next post in this series, I’ll discuss ways to deal with this challenge.</p>\n<h2>Con: intermediaries and white labeling</h2>\n<p>This affects the amount you take home as well. Sometimes you’ll work through multiple agencies to get the project. I was on a project like that just recently; one agency hired me to put me on a project for another agency that had a project for a technology company (the client). The client paid the bills, but two companies took a cut before I got my paycheck, which means that the rate I got wasn’t anywhere near what the client was paying per hour.</p>\n<p>This process is called &#8220;white-labeling&#8221;—where you get hired by one company which rents you out to another company, who places you on a client project. The client often perceives you as working for the second agency, who is working directly for them. This process happens a lot in the technical consulting world. There’s nothing inherently wrong with it at all—everybody needs more help serving their clients at some point, and it’s not always necessary for the client to know that you borrowed an engineer from another company.</p>\n<p>The downside (for you) is that you take two cuts in your salary, and sometimes you don’t get the credit. Which leads to our next challenge&#8230;</p>\n<h2>Con: non-competes</h2>\n<p>When a client hires an agency, and the agency hires you, the client is not your client. Meaning, your contract will often legally prohibit you from working directly for that client for at least a period of 2 years (this number may vary).</p>\n<p>While you’re working for them during that 2-year period, often your contract will give them an option to hire you as a salaried employee (if you want to be hired, of course). But the agency will charge a significant fee for this—about 20% of a year’s salary which the client hires you at in my experience. I’ve heard some say it could go as high as 50%, but I’ve yet to hear of an example of this.</p>\n<p>To put things in perspective, given a typical engineer’s salary these days, this means the client will have to kick in anywhere from $12,000-$36,000 to legally hire you through the agency, on top of having to pay your salary (assuming a salary range of $60k-$160k). So they’ve got to weigh out how much value you&#8217;ll add the company long-term, and if it&#8217;s worth the upfront investment.</p>\n<p>There are ways around this limitation though. Make sure you check out the next post in this series.</p>\n<h2>Con: no portfolio piece for you</h2>\n<p>When working with recruiters, staffing agencies, and consulting agencies, often they’ll retain exclusive credit for the work you do. Not always, but it’s not uncommon. They’re building their brand as an agency, and a big part of how they do that is listing clients and projects in their portfolio &#8211; which means you don’t get to do so on your website.</p>\n<p>The natural downside to this is that you’ll have less to show off on your own website, and when you do some truly kickass work, it can be a bitter pill to swallow. But there are times when it’s a worthwhile sacrifice, and I also have ways you can work around this which I’ll talk about in part 3.</p>\n<h2>Summary</h2>\n<p>In <a href=\"http://cavalieredev.wpengine.com/how-to-get-freelance-programming-work-using-tech-recruiters-when-to-use-them/\">part 1</a> we talked about when to use recruiters and staffing agencies to further your freelance programming career and build relationships. In this installment, we talked about the benefits and potential pitfalls of working with them. In part 3, we’ll discuss the how of working with tech recruiters—tips and tactics for leveraging them properly in order to get the most benefits (and working around the sacrifices you might have to make).</p>\n"
  },
  "how-to-get-freelance-programming-work-using-tech-recruiters-when-to-use-them": {
    "id": "cG9zdDo2NzI=",
    "title": "How to Get Freelance Programming Work Using Tech Recruiters Part 1: When to Use Them",
    "excerpt": "<p>Tech recruiters often get a bad rap. Some of it is warranted; too many of them harass programmers with unsolicited cold emails or LinkedIn messages that make us feel like numbers. How many of us have been pestered about &#8220;the opportunity of a lifetime&#8221; &#8230;with a company we’re not remotely interested in, using a programming [&hellip;]</p>\n",
    "slug": "how-to-get-freelance-programming-work-using-tech-recruiters-when-to-use-them",
    "date": "2018-11-23T12:00:13",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/11/49160383_m.jpg",
        "altText": "Illustration of businessman being stretched apart by giant hands",
        "description": null,
        "sizes": "(max-width: 286px) 100vw, 286px",
        "srcSet": "/2018/11/49160383_m-286x300.jpg 286w, /2018/11/49160383_m-143x150.jpg 143w, /2018/11/49160383_m-768x805.jpg 768w, /2018/11/49160383_m-977x1024.jpg 977w, /2018/11/49160383_m-629x660.jpg 629w, /2018/11/49160383_m-381x400.jpg 381w, /2018/11/49160383_m-496x520.jpg 496w, /2018/11/49160383_m.jpg 2000w",
        "mediaDetails": {
          "height": 2097,
          "width": 2000
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Tech recruiters often get a bad rap. Some of it is warranted; too many of them harass programmers with unsolicited cold emails or LinkedIn messages that make us feel like numbers. How many of us have been pestered about &#8220;the opportunity of a lifetime&#8221; &#8230;with a company we’re not remotely interested in, using a programming language we hate?</p>\n<p>That said, recruiters and staffing agencies can be fantastic assets, especially at specific times during your career.</p>\n<p>This article, the first of a multi-part series on using tech recruiters and staffing agencies to get freelance programming work, will discuss what those times are. Subsequent posts will go into details about how to get work through tech recruiters, and how to move past it to build up your career.<!--more--></p>\n<h2>The mindset of working with tech recruiters</h2>\n<p>First of all, I think it’s important to get past something I had to let go early in my career &#8211; I had to stop loathing recruiters. Mind you, back then recruiters would be known for cold-calling the phone on your desk and trying to poach you away from your current job—the number which they had gotten by stealing the company phone directory, or other sketchy means. They were really, really hard to like.</p>\n<p>For starters, not all recruiters are like that, especially now. Don’t get me wrong; those shady types are still out there. Others will blanket message everyone with the word “programmer” or “engineer” anywhere in their LinkedIn profile with jobs that don’t match their skill set. (They send me Python job descriptions all the time. I don&#8217;t know Python.) The latter is something to try to look past since their job is partly a numbers game. Later in this series, I’ll give you tips to filter through this mess a lot more easily to find the jobs you want.</p>\n<p>Another thing I had to get past was resentment—why the hell should a recruitment agency take home 50% or more of every hour I work, just because they connected me with the client? This is still a concern, and a trap you don’t want to get caught in for the long term. Some recruiters charge an amount for your time that is vastly disproportionate to the value they deliver. But they do provide a few very valuable things that are useful at different points in your career:</p>\n<ul>\n<li>Work, when it’s not plentiful</li>\n<li>Connections to companies and industries you haven’t gotten exposure to</li>\n<li>Experience, if you need some</li>\n<li>A variety of projects to choose from</li>\n</ul>\n<p>Furthermore, not all of them take huge margins, and some provide value beyond a connection. Overall I recommend utilizing recruiters in a short-term manner for specific times in your career and specific career goals.</p>\n<h2>When to use technology recruiters</h2>\n<p>As a freelance programmer, designer, copywriter or other tech professional, there are a few specific situations I find recruiters particularly helpful:</p>\n<h3>Early in your freelance career</h3>\n<p>When you don’t have a lot experience, recruiters can give you project options you didn&#8217;t have previously. <a href=\"http://mikecavaliere.wpengine.com/how-to-get-freelance-programming-work-with-no-experience/\">Getting experience when you have no experience</a> is one of the biggest challenges when starting out as a freelance programmer. Leverage recruiters, and you&#8217;ll fill out your resume faster, which will lead to bigger and better opportunities that you won&#8217;t need recruiters for. Remember, every piece of experience you get is something to show off, which continues the cycle of <a href=\"http://mikecavaliere.wpengine.com/get-hired-again-and-again/\">getting work again and again</a>.</p>\n<h3>To add popular companies your resume</h3>\n<p>This is a fantastic reason to use a recruiter and one that I used to build up my career. Recruiters will have connections to companies you might not have. Having big names on your resume and in your portfolio looks great to potential clients and employers. <a href=\"/portfolio\">Check out my portfolio</a> for example; saying that you worked with companies that everyone has heard of catches people’s attention, and leads to conversations that can lead to more work.</p>\n<h3>During downtimes, or when you need work quickly</h3>\n<p>When freelancing as a career, you’ll inevitably run into feast-or-famine periods or just times when work options are less plentiful. During times like these recruiters can present you with options for projects that you didn’t have otherwise.</p>\n<p>If another project falls through unexpectedly and you want to make sure you have something in the pipeline, hitting up a few recruiters can help you land another gig in a pinch.</p>\n<p>This is particularly good when you&#8217;ve built up relationships with a variety of recruiters; chances are when you need something, at least one will have something for which the timing, skillset and rate will be a fit.</p>\n<h3>To expand into a new tech stack or industry</h3>\n<p>If you’re trying to pick up some a new framework you don’t have tons of experience with, it might be hard to get a project for that through your existing personal network. Likewise, if you’ve been working in one industry for a while, your connections will reflect that—you may not know anyone in the new industry you’re trying to get into.</p>\n<p>Recruiters in both cases can help you bridge that gap. There are plenty of recruiting agencies that also specialize in specific industries like healthcare and advertising. Similarly, for tech stacks, I’ve come across lots of recruiters that get an abundance of one type of framework (I know one that has lots of AngularJS work for example and another that gets tons of WordPress work).</p>\n<p>There are also other companies out there that specialize in one technology like React Native for example—they aren’t exactly recruiting agencies, but consultancies that hire freelance developers. These are great shops to work with as well if you want to get your hands dirty with new tech.</p>\n<hr />\n<p>This article is part 1 of <em>How to Get Freelance Programming Work Using Tech Recruiters</em>. In <a href=\"http://cavalieredev.wpengine.com/how-to-get-freelance-programming-work-using-tech-recruiters-part-2-pros-and-cons/\">part 2</a>, we&#8217;ll talk about all of the pros and cons to consider when working with tech recruiters and staffing agencies.</p>\n<p>Thoughts on this article? Questions? <a href=\"http://mikecavaliere.wpengine.com/contact/\">Contact me</a> or leave a comment below.</p>\n"
  },
  "how-to-convert-javascript-es6-object-to-class": {
    "id": "cG9zdDo2NTM=",
    "title": "How to Convert a JavaScript / ES6 Object to a Class",
    "excerpt": "<p>Here’s a simple JavaScript / ES6 refactoring pattern that comes up often. Usually you’ll start a project by combining a loose methods into an object, and passing data as parameters. As the object grows bigger, you&#8217;ll see that some of the methods are related, and belong in their own class. How do you get them [&hellip;]</p>\n",
    "slug": "how-to-convert-javascript-es6-object-to-class",
    "date": "2018-09-28T12:27:50",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/09/600px-JavaScript-logo.png",
        "altText": "JavaScript-logo",
        "description": "<p>By Ramaksoud2000 via Chris Williams (Wikipedia via GitHub logo.js) [Public domain], via Wikimedia Commons</p>\n",
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2018/09/600px-JavaScript-logo-300x300.png 300w, /2018/09/600px-JavaScript-logo-150x150.png 150w, /2018/09/600px-JavaScript-logo-400x400.png 400w, /2018/09/600px-JavaScript-logo-520x520.png 520w, /2018/09/600px-JavaScript-logo-45x45.png 45w, /2018/09/600px-JavaScript-logo.png 600w",
        "mediaDetails": {
          "height": 600,
          "width": 600
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "JavaScript"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Here’s a simple JavaScript / ES6 refactoring pattern that comes up often. Usually you’ll start a project by combining a loose methods into an object, and passing data as parameters. As the object grows bigger, you&#8217;ll see that some of the methods are related, and belong in their own class. How do you get them there without breaking everything?</p>\n<p>There&#8217;s a simple set of refactoring steps that I use often for this exact purpose. First let’s describe the problem with an example.<!--more--></p>\n<h2>When JavaScript Objects No Longer Suffice</h2>\n<p>Let&#8217;s say you&#8217;re developing a command-line Node.js utility (as I currently am while I write this post). As you start building your app, you&#8217;ll find yourself adding a variety of functions for different purposes and throwing them into a general-purpose file. I often call mine <code>utils.js</code>:</p>\n<p>https://gist.github.com/mcavaliere/9d097d5148ee6fa45e60917870fbdc53</p>\n<p>As your general-purpose function file grows, often you&#8217;ll see a pattern: in this case, there are 3 methods that center around the purpose of managing a configuration object. In addition, you may be currently referring to those methods like this:</p>\n<p>https://gist.github.com/mcavaliere/148ed70cf22fb8096a7afbb271a12deb</p>\n<p>There&#8217;s another pattern here: 2 of these functions are referring to a single config object. Anytime you have a collection of functions that are working off a shared set of data, it’s justifiable to (1) put these methods into their own file and (2) change this object into an instantiatable class. The benefits are:</p>\n<ul>\n<li><strong>Modularity.</strong> These functions are in their own category,  and can be separated from the other general-purpose functions.</li>\n<li><strong>Code Reusability.</strong> If you need to use the same functions with different sets of data, you can (by creating multiple class instances).</li>\n<li><strong>Code Readability.</strong> Your function (method) names and their parameters can often be shortened.</li>\n<li><strong>Separation of Concerns.</strong> If these functions are mixed in with others around different purposes, you can break them into a single-purpose class.</li>\n</ul>\n<h2>How to convert your object to a class</h2>\n<p>Here&#8217;s the overview of steps:</p>\n<ol>\n<li>Change the object itself\n<ul>\n<li>Add class keyword to object definition</li>\n<li>Save any shared data as an instance property</li>\n<li>Change non-instance related methods to static</li>\n</ul>\n</li>\n<li>Change references to the object\n<ul>\n<li>Instantiate using the new keyword</li>\n<li>Static methods stay the same!</li>\n</ul>\n</li>\n<li>Clean up and reap the benefits</li>\n</ol>\n<p>Let&#8217;s get rolling!</p>\n<h3>Part one: converting your object definition</h3>\n<p>First we create a new file (<code>config.js</code>) for our <code>Config</code> class, and change the definition by adding the <code>class</code> keyword:</p>\n<p>https://gist.github.com/mcavaliere/a0a7f3ba32e55b6aa705c84bce1db452</p>\n<p>Now we&#8217;re exporting a class that we can create multiple instances of. But for the existing functionality to continue working as we intend it do, we&#8217;ll have to make some other internal changes.</p>\n<p>As we move our functions over to the new file, we take that shared data we&#8217;re passing into every function and save it to the instance. We load the config object however we were before, but save it to the instance using the <code>this</code> keyword:</p>\n<p>https://gist.github.com/mcavaliere/18ccf8baa51bc8b3bbb9aed4510e2837</p>\n<p>Now our config property will exist whenever I refer to this instance after calling <code>initConfig()</code>. From here on in, I&#8217;ll be calling these functions &#8220;methods&#8221;, since they&#8217;re now part of a class.</p>\n<p>We&#8217;re left with any methods that don&#8217;t operate on the shared data. These don&#8217;t need to get added to every instance of the class and bloat our application, so we can make them static methods and call them directly on the class.</p>\n<p>https://gist.github.com/mcavaliere/5972b12392e6f0d39a572e8de2fa920e</p>\n<h3>Part two: changing existing references</h3>\n<p>Now that the guts of our simple JavaScript object are converted to be a real class, we need to change the calls to its methods so that they use the proper syntax.</p>\n<p>First we make sure to create a class instance that we&#8217;ll operate off of. Let&#8217;s initialize our config instance, and change the call to initConfig(). Since this class is in its own file now, we&#8217;ll change the import statement too:</p>\n<p>https://gist.github.com/mcavaliere/5e8c64fe70d4bb3d876886545f0858d2</p>\n<p>And now we change the reference to the static method to access it through the new <code>Config</code> instance instead of the now-separate <code>Utils</code> object. We can also remove the old <code>config</code> argument, since we no longer have to reference this variable externally:</p>\n<p>https://gist.github.com/mcavaliere/6f83d0afadf551007967fdc56a9cc0df</p>\n<p>At this point the minimal amount of work is done: our code is changed into a class and the calls to it will still function. Now to go the extra mile and clean it up, for more readable and unambiguous code.</p>\n<h3>Part three: clean up and reap the benefits</h3>\n<p>To me this is one of the best parts of refactoring code (maybe because I&#8217;m a neat freak): making things clean and orderly.</p>\n<p>We&#8217;ve already removed arguments to any functions that pass the config object around, since we&#8217;re referring to the shared object internally now. Now we can also remove the word <code>config</code> from the method names, since it&#8217;s implicit in the class name. Shorter method names means better readability. The final code for both files looks like this:</p>\n<p>https://gist.github.com/mcavaliere/e417c982fd1cd55c2e8307b5fe6a68d5</p>\n<p>And now we have a far cleaner and more reusable object class than we had before.</p>\n<hr />\n<p>This pattern comes up for me a lot, and is helpful when you develop your apps progressively; it&#8217;s very useful for adding structure to your codebase as it grows.</p>\n<p>Have you used this pattern before? Let me know in the comments.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"
  },
  "the-programming-language-you-can-use-everywhere": {
    "id": "cG9zdDo2Mzk=",
    "title": "The Programming Language You Can Use Everywhere",
    "excerpt": "<p>One of the top questions I get asked by people looking to learn to code is &#8220;Where do I start??&#8221; There are dozens upon dozens of programming languages to choose from. On top of that, there are frameworks for each of those. And tools, plugins, and add-ons for each that number in the hundreds. It seems every day there&#8217;s something new, so for a rookie, the options can be overwhelming.</p>\n<p>It&#8217;s easy to get analysis paralysis in this situation. So stop thinking about it.</p>\n<p>Just learn JavaScript.</p>\n<p>You will not regret it. Here are a half-dozen reasons why.</p>\n",
    "slug": "the-programming-language-you-can-use-everywhere",
    "date": "2018-09-17T14:10:31",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2.png",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2-300x94.png 300w, /2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2-150x47.png 150w, /2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2-768x240.png 768w, /2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2-1024x320.png 1024w, /2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2-1100x344.png 1100w, /2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2-400x125.png 400w, /2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2-720x225.png 720w, /2018/09/Blog-hero-The-code-which-you-can-use-everywhere-2.png 1280w",
        "mediaDetails": {
          "height": 400,
          "width": 1280
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>One of the top questions I get asked by people looking to learn to code is &#8220;Where do I start??&#8221; There are dozens upon dozens of programming languages to choose from. On top of that, there are frameworks for each of those. And tools, plugins, and add-ons for each that number in the hundreds. It seems every day there&#8217;s something new, so for a rookie, the options can be overwhelming.</p>\n<p>It&#8217;s easy to get analysis paralysis in this situation. So stop thinking about it.</p>\n<p>Just learn JavaScript.</p>\n<p>You will not regret it. Here are a half-dozen reasons why.<!--more--></p>\n<h2 class=\"subheading\">JavaScript is Versatile</h2>\n<p style=\"text-align: left;\">JavaScript is the Swiss Army knife of programming. You already know you can use it to build website interactivity—that&#8217;s no secret. Did you know you can use it to build mobile apps as well? Or program robots?</p>\n<p style=\"text-align: left;\">Here are a bunch of different tools that use JavaScript in completely different ways. I guarantee there&#8217;s something for you in there.</p>\n<p><strong>Animation (2-D/3-D)</strong></p>\n<ul>\n<li style=\"text-align: left;\"><a href=\"http://threejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Three.JS</a></li>\n<li style=\"text-align: left;\"><a href=\"https://greensock.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GreenSock</a></li>\n<li style=\"text-align: left;\"><a href=\"http://julian.com/research/velocity/\" target=\"_blank\" rel=\"noopener noreferrer\">Velocity.js </a></li>\n</ul>\n<p style=\"text-align: left;\"><strong>Back-End Web Development</strong></p>\n<ul>\n<li style=\"text-align: left;\"><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.JS</a></li>\n</ul>\n<p style=\"text-align: left;\"><strong>Design</strong></p>\n<ul>\n<li style=\"text-align: left;\"><a href=\"https://www.smashingmagazine.com/2013/07/introduction-to-photoshop-scripting/\" target=\"_blank\" rel=\"noopener noreferrer\">Photoshop / Illustrator Automation</a></li>\n</ul>\n<p style=\"text-align: left;\"><strong>Documents &amp; Spreadsheets</strong></p>\n<ul>\n<li style=\"text-align: left;\"><a href=\"https://developers.google.com/apps-script/\" target=\"_blank\" rel=\"noopener noreferrer\">Google Apps Script</a></li>\n</ul>\n<p style=\"text-align: left;\"><strong>Dynamic Web Apps</strong></p>\n<ul>\n<li style=\"text-align: left;\"><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a></li>\n<li style=\"text-align: left;\"><a href=\"https://angularjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">AngularJS</a></li>\n<li style=\"text-align: left;\"><a href=\"http://backbonejs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Backbone.js</a></li>\n<li style=\"text-align: left;\"><a href=\"http://emberjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Ember.js</a></li>\n<li style=\"text-align: left;\">Good ol&#8217;<span> </span><a href=\"https://jquery.com/\">jQuery</a></li>\n<li style=\"text-align: left;\"><a href=\"https://medium.com/@alberto.park/the-status-of-javascript-libraries-frameworks-2018-beyond-3a5a7cae7513\" target=\"_blank\" rel=\"noopener noreferrer\">Tons of others</a>…</li>\n</ul>\n<p style=\"text-align: left;\"><strong>Mobile Apps</strong></p>\n<ul>\n<li style=\"text-align: left;\"><a href=\"https://facebook.github.io/react-native/\" target=\"_blank\" rel=\"noopener noreferrer\">React Native</a></li>\n<li style=\"text-align: left;\"><a href=\"http://www.appcelerator.com/mobile-app-development-products/\" target=\"_blank\" rel=\"noopener noreferrer\">Appcelerator</a></li>\n<li style=\"text-align: left;\"><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Apache Cordova</a><span> </span>(PhoneGap)</li>\n<li style=\"text-align: left;\"><a href=\"https://www.meteor.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Meteor</a></li>\n</ul>\n<p><strong>Robotics / Electronics / Internet of Things</strong></p>\n<ul>\n<li><a href=\"http://node-ardx.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino + NodeJS</a></li>\n<li><a href=\"http://weworkweplay.com/play/raspberry-pi-nodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">Raspberry Pi + NodeJS</a></li>\n<li><a href=\"http://johnny-five.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Johnny-Five</a></li>\n<li><a href=\"http://nodebots.io/\" target=\"_blank\" rel=\"noopener noreferrer\">NodeBots</a></li>\n<li><a href=\"https://cylonjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Cylon.JS</a></li>\n</ul>\n<p><strong>Web APIs</strong></p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/javascript/\" target=\"_blank\" rel=\"noopener noreferrer\">Google Maps</a></li>\n<li><a href=\"https://developers.facebook.com/docs/javascript\" target=\"_blank\" rel=\"noopener noreferrer\">Facebook</a></li>\n<li><a href=\"http://www.programmableweb.com/category-api\" target=\"_blank\" rel=\"noopener noreferrer\">Tons more</a>…</li>\n</ul>\n<p><strong>Windows / Mac Desktop Apps</strong></p>\n<ul>\n<li><a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Electron</a></li>\n<li><a href=\"http://appjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">AppJS</a></li>\n<li><a href=\"http://ionicframework.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Ionic</a></li>\n</ul>\n<h2 class=\"subheading\">Tons of High-Paying JavaScript Jobs</h2>\n<p>If you decide to get a job as a developer, guess what—JavaScript can get you there, and get you paid in full.</p>\n<p>Everybody wants developers who know JavaScript. Most job descriptions for web developers of any kind have JavaScript listed on there.</p>\n<p>But hey, don&#8217;t believe me. Look at some stats, or do a quick Google search for &#8220;JavaScript Jobs 2018&#8221;:</p>\n<ul>\n<li><a href=\"https://blog.bloc.io/2014-javascript-developer-job-trends-report/\" target=\"_blank\" rel=\"noopener noreferrer\">The Job Market for JavaScript Developers</a></li>\n<li><a href=\"http://www.indeed.com/salary/q-Javascript-Developer-l-United-States.html\" target=\"_blank\" rel=\"noopener noreferrer\">Javascript Developer Salaries in the United States</a></li>\n<li><a href=\"https://blog.tunga.io/the-top-17-most-in-demand-software-skills-for-2018-f37df6c0915b#ab15\">The Top 17 Most In-Demand Software Skills for 2018</a></li>\n<li><a href=\"https://gooroo.io/analytics/skill/JavaScript/#.VzoVkhUrLc4\" target=\"_blank\" rel=\"noopener noreferrer\">Gooroo Worldwide salary analysis for JavaScript</a></li>\n</ul>\n<h2 class=\"subheading\">JavaScript is Insanely Popular</h2>\n<p>JavaScript routinely ends up in the top five programming languages in terms of popularity. On just about every study I see, JavaScript ranks way high up there.</p>\n<p>Every web developer out there knows it in some capacity—front-end developers, back-end developers, mobile developers. It&#8217;s become a must-have on every technical résumé.</p>\n<p>Mo&#8217; links:</p>\n<ul>\n<li><a href=\"https://insights.stackoverflow.com/survey/2018#technology\">Stack Overflow Developer Survey 2018</a></li>\n<li><a href=\"http://redmonk.com/sogrady/2018/03/07/language-rankings-1-18/\" target=\"_blank\" rel=\"noopener noreferrer\">The RedMonk Programming Language Rankings: January 2018</a></li>\n<li><a href=\"http://www.tiobe.com/tiobe_index\" target=\"_blank\" rel=\"noopener noreferrer\">TIOBE Index</a></li>\n<li><a href=\"https://www.codingdojo.com/blog/7-most-in-demand-programming-languages-of-2018/\">The 7 Most In-Demand Programming Languages of 2018</a></li>\n</ul>\n<h2 class=\"subheading\">JavaScript is Easy to Get Started With</h2>\n<p>If you need a tutorial, there are insane amounts of free ones on the web. Google &#8220;javascript tutorial&#8221; and go crazy.</p>\n<p>It&#8217;s taught everywhere as well.<span> </span><a href=\"https://www.lynda.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Lynda.com</a><span> </span>and a multitude of other sites offer paid video tutorials. Schools teach it. Individuals teach it. We teach it here at ATTCK. But you don&#8217;t even need a teacher to get started.</p>\n<p>In fact, you don&#8217;t need a single thing to begin learning the basics of JavaScript. Open up<span> </span><a href=\"http://codepen.io/\" target=\"_blank\" rel=\"noopener noreferrer\">codepen.io</a><span> </span>or the<span> </span><a href=\"https://developer.chrome.com/devtools/docs/console\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome Debugger Console</a><span> </span>and start playing around. Pretty soon you&#8217;ll be hungry for more.</p>\n<h2 class=\"subheading\">JavaScript Has a Huge Community</h2>\n<p>JavaScript is coded by millions of developers worldwide, in some form or another. Every city has free Meetup events where you can meet peers, mentors, and others looking to learn just like you.<br />\nIn NYC alone there are meetups dedicated to all things JS:<span> </span><a href=\"http://www.meetup.com/NYC-Javascript-React-Group\" target=\"_blank\" rel=\"noopener noreferrer\">React</a>,<span> </span><a href=\"http://www.meetup.com/AngularJS-NYC/\" target=\"_blank\" rel=\"noopener noreferrer\">AngularJS</a>,<span> </span><a href=\"http://www.meetup.com/nyc-node-js/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a>,<span> </span><a href=\"http://www.meetup.com/jQueryNYC/\" target=\"_blank\" rel=\"noopener noreferrer\">jQuery</a>, and so on.</p>\n<h2 class=\"subheading\">JavaScript is Fun!</h2>\n<p>A lot of people enjoy the craft of building things with JS—visual things in the browser are beautiful and engaging. There&#8217;s a low turnaround time—you don&#8217;t need to compile anything, so you see the fruits of your labor pretty quickly compared to other languages.<br />\nPlus look at<span> </span><a href=\"http://www.awwwards.com/awards-of-the-month/\" target=\"_blank\" rel=\"noopener noreferrer\">some of the cool stuff you can create with it</a>. It&#8217;s impossible not to be proud of creating something like any of those.</p>\n<h2 class=\"subheading\">Let&#8217;s Get Coding</h2>\n<p>Now that you know all the things JavaScript can do, what are you waiting for? Read a tutorial and start coding. Or <a href=\"http://mikecavaliere.wpengine.com/contact/\">reach out</a> with questions.</p>\n<p>But whatever you do—start getting some practice and start making something cool.</p>\n<hr />\n<p><em>This post originally appeared on <a href=\"https://attck.com/the-programming-language-you-can-use-everywhere/\">ATTCK.com</a>.</em></p>\n"
  },
  "hiring-a-freelance-programmer-do-you-need-one-yet": {
    "id": "cG9zdDo1OTk=",
    "title": "Hiring a Freelance Programmer: Do You Need One Yet?",
    "excerpt": "<p>Quite often, clients will come to me and ask me for help doing any of a number of things. Redesigning and rebuilding their website. Building a single-page React app. Creating a WordPress or Shopify theme. Building a mobile app. Or otherwise creating or altering a complicated piece of technology. I could stop right there and [&hellip;]</p>\n",
    "slug": "hiring-a-freelance-programmer-do-you-need-one-yet",
    "date": "2018-07-09T16:08:44",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/07/Fotolia_115366290_M.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2018/07/Fotolia_115366290_M-300x184.jpg 300w, /2018/07/Fotolia_115366290_M-150x92.jpg 150w, /2018/07/Fotolia_115366290_M-768x472.jpg 768w, /2018/07/Fotolia_115366290_M-1024x630.jpg 1024w, /2018/07/Fotolia_115366290_M-1073x660.jpg 1073w, /2018/07/Fotolia_115366290_M-400x246.jpg 400w, /2018/07/Fotolia_115366290_M-720x443.jpg 720w, /2018/07/Fotolia_115366290_M.jpg 1758w",
        "mediaDetails": {
          "height": 1081,
          "width": 1758
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Hiring Freelance Programmers"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Quite often, clients will come to me and ask me for help doing any of a number of things. Redesigning and rebuilding their website. Building a single-page React app. Creating a WordPress or Shopify theme. Building a mobile app. Or otherwise creating or altering a complicated piece of technology.</p>\n<p>I could stop right there and hit them with a price tag immediately, collect half up front and start coding. I don&#8217;t. The next thing I do is ask them a question that just might prevent me from getting that money.</p>\n<p>&#8220;Why?&#8221;<!--more--></p>\n<h2>What&#8217;s the intended outcome?</h2>\n<p>Why do they want this app/theme/site/redesign/widget done &#8211; what&#8217;s the goal? Almost always, they&#8217;re looking for things like more traffic, more sales leads, higher revenue and so on.</p>\n<p>Then I go ahead and ask my second question, which is almost guaranteed to prevent me from getting the project 50% of the time:</p>\n<p>&#8220;How do you know that this project will help you achieve that goal?&#8221;</p>\n<p>E.g., &#8220;How do you know that building a mobile app will bring you more customers?&#8221;</p>\n<p>Or, &#8220;How do you know that redesigning this website will increase revenue?&#8221;</p>\n<p>If the answer is some version of &#8220;why wouldn&#8217;t it?&#8221;, I have them stop right there. They&#8217;ve gotten ready to put down a lot of money on a guess; they&#8217;re guessing that A will cause B without any sort of testing.</p>\n<h2>Validate your assumptions</h2>\n<p>It&#8217;s common mistake for people to think that a website redesign or custom-branded app will magically increase their revenue, get them more website traffic or increase leads. And quite often, developers and designers take their money and move onto the next project. Because technically, it&#8217;s not their job to tell clients how to spend their money. Clients are the businesspeople &#8211; they make business decisions. Designers and developers design and develop. Everyone&#8217;s just doing their job, which is ok&#8230;but it&#8217;s always preferred if the end result satisfies the client&#8217;s end goal. Instead of hiring someone straight away, you might want to look at some blogs about <a href=\"https://skup.net/blog/shopify-store-design/\">Shopify Store Designs</a> to see if there is anything you could do to help your eCommerce business yourself before you contact someone to help. If it transpires that you will need to get help with your online business, you can always look at helping your <a href=\"https://victoriousseo.com/verticals/shopify-seo/\">shopify seo</a> by contacting an SEO company that specializes in this area.</p>\n<p>In the world of all things agile and lean<span>&#8211;</span>software, UX, product development<span>&#8211;</span>it&#8217;s crucial that every idea you have be treated as a hypothesis. A hypothesis is an educated guess; and with some validation or testing, it can be a much smarter educated guess. A hypothesis needs to be tested before it becomes a fact. Without some data, be very careful where you put your money.</p>\n<p>As a technical strategy consultant (who happens to code, and sometimes oversee designers and developers), I don&#8217;t take the money and run (anymore). I get a lot more joy from having my clients make money from the work I do since I want them coming back to me with more of that money I helped them make. It&#8217;s like the old Vidal Sassoon commercials for those old enough to remember: &#8220;If you don&#8217;t look good, we don&#8217;t look good.&#8221; If I help you make money, I look a lot better.</p>\n<p><b>Think before you leap</b></p>\n<p>There is a multitude of low-cost ways to start testing assumptions like these before you redesign, build, or engineer anything. Everything from landing pages to low-fi usability tests to &#8220;coming soon&#8221; product websites and so on. The different methods could fill an entire blog post.</p>\n<p>But if you take anything away from this one article, take away one thing: before you spend money on a software project of any kind&#8230;what do you hope to gain from it? And what evidence do you have that you will?</p>\n<p>After you&#8217;ve thought about that a bit, <a href=\"http://mikecavaliere.wpengine.com/contact/\">drop me a line</a>.</p>\n"
  },
  "your-js-is-a-mess-javascript-namespacing": {
    "id": "cG9zdDo1MzU=",
    "title": "Your JS is a Mess. Javascript Namespacing",
    "excerpt": "<p>Chances are, unless you’re somewhat experienced with Javascript, you probably write a lot of sloppy JS. It’s not an insult. Don’t take it that way. It’s just a reality, and it’s not your fault. When everyone starts out with Javascript (like any programming language), they learn how to write it the most basic way. And most of [&hellip;]</p>\n",
    "slug": "your-js-is-a-mess-javascript-namespacing",
    "date": "2015-12-22T14:57:49",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/12/Fotolia_55386297_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/12/Fotolia_55386297_XS-300x201.jpg 300w, /2015/12/Fotolia_55386297_XS-150x100.jpg 150w, /2015/12/Fotolia_55386297_XS.jpg 423w",
        "mediaDetails": {
          "height": 283,
          "width": 423
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Developer Training"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Chances are, unless you’re somewhat experienced with Javascript, you probably write a lot of sloppy JS.</p>\n<p>It’s not an insult. Don’t take it that way. It’s just a reality, and it’s not your fault.</p>\n<p>When everyone starts out with Javascript (like any programming language), they learn how to write it the most basic way. And most of the time with Javascript, that’s enough for you to be pretty productive. For a while.</p>\n<p>Once you’ve got a f***ton of JS code on your website though, it’s gonna be harder to maintain, organize, read, or even find what you need. It’ll be more prone to breaking, and harder to debug. And you’ll be hiring someone like me to come clean it up and teach you how to do it better. While I enjoy money, there are some helpful JS techniques that can make your life easier in the meantime.<!--more--></p>\n<h2>Enter Javascript Namespacing</h2>\n<p>Namespaces and encapsulation exist in just about any object-oriented or object-based programming language. They’re simple to understand, and can go a long way in making your code more organized. Learn what I’m about to teach you, make it into a habit, and then come back and thank me for it.</p>\n<p><strong>TL;DR:</strong> Namespacing == good. If you already know why and want to skip to how, jump to <a href=\"http://mikecavaliere.wpengine.com/your-js-is-a-mess-javascript-namespacing#how-to-namespace-javascript\">How to Namespace Your Javascript</a> below.</p>\n<h2>Why Namespace Javascript? It’s All About Organization</h2>\n<p>Ever live with a <a href=\"http://www.aetv.com/shows/hoarders\">hoarder</a>? I haven’t, but I’ve lived with messy people. It drove me nuts. Given, I’m more crazy than most when it comes to neatness. But still. Live in an apartment that is a perpetual mess, and you’re guaranteed to be slower at getting anything done. Same deal for a messy desk at work.</p>\n<p>If your code is a mess, it’s going to slow you (and other developers) down big time. Sometimes you’ll realize it, sometimes you won’t. It’s the kind of thing where you’re so used to working with the status quo that you don’t know what “better” feels like.</p>\n<p>It’s far more noticeable when you’ve got components you want to make reusable. You take the function and put it in a separate file, and something breaks. You make it work, but no one knows where to find it. There’s no logical separation.</p>\n<p>Or you have something important and you want to add automated tests to it. But you can’t, because your functions only run on the page you created them on.</p>\n<h3>But I use CommonJS/AMD. Do I still need to learn this?</h3>\n<p>Yes. Even though these make your JS more modular by themselves, complex classes will still have a lot of moving parts within them. Namespacing is still very, very useful.</p>\n<h3>But I use AngularJS/React/whatever. Do I still need to&#8230;[*interrupts you*]</h3>\n<p>YES! Complex code always needs organization. Frameworks use their own namespaces (e.g.,  angular.module() or React.createClass() among tons of examples). Your code, as it gets complex, will need them too.</p>\n<h2>Where Namespacing Helps</h2>\n<p>Here are a few examples of the types of code namespacing can make better, and why.</p>\n<h3>Grouping Loose Methods</h3>\n<p>https://gist.github.com/mcavaliere/ecf8d7759340bd6e9a9f</p>\n<h3>Grouping Data</h3>\n<p>https://gist.github.com/mcavaliere/4e8ba03644312924f61d</p>\n<h3>Encapsulating a UI Component</h3>\n<p>When an HTML element has a certain behavior and information attached to it, it&#8217;s very logical to keep its behavior and data in one place. Here&#8217;s an example of a simple select box that gets populated with data, and an event gets attached to it.</p>\n<p>Here the data (the countriesIveBeenTo array) is a global variable which can get overwritten. Also this code is heavily tied to the #countries element; there&#8217;s no way we can reuse it for multiple select boxes.</p>\n<p>https://gist.github.com/mcavaliere/be9cb91f61e114de8c7c</p>\n<p>But putting this component in its own namespace, we can keep the data inside the component so it can&#8217;t be overwritten by a variable with the same name. I&#8217;ll go more into detail on this approach in another article. But just know that this keeps our data private, and makes this module far more reusable:</p>\n<p>https://gist.github.com/mcavaliere/1c3dfb95ccbe29761543</p>\n<h3>Reducing Conflicts &amp; Data Overwriting</h3>\n<p>Ever create a Javascript variable called id, or userId, or link or div or element?</p>\n<p>I sure have. At least a hundred times apiece. Know what happens when you accidentally create the same variable twice in the page?</p>\n<p>Say you&#8217;ve got a login form with a big div above it containing any error messages:</p>\n<p>https://gist.github.com/mcavaliere/b257f4236c9a9c5b0176</p>\n<p>Guess what? When the user clicks submit, the form field disappears instead of the error container. This could have been avoided if the components were namespaced:</p>\n<p>https://gist.github.com/mcavaliere/c465ce781c9c5a9b8755</p>\n<h2 id=\"how-to-namespace-javascript\">How to Namespace Your Javascript</h2>\n<p>In their simplest form, Javascript namespaces are just normal Javascript objects.</p>\n<p>https://gist.github.com/mcavaliere/1f10d56a1b2b857af2ac</p>\n<p>You access them like so:</p>\n<p>https://gist.github.com/mcavaliere/87cd9bb413b947d5caef</p>\n<p>You can nest them as deep as you want:</p>\n<p>https://gist.github.com/mcavaliere/58fd8ddd76da26fc5f6b</p>\n<p>You can build them gradually, rather than in one shot (this helps you separate things into different files):</p>\n<p>https://gist.github.com/mcavaliere/abde232e10777d69c9c3</p>\n<h2>Namespacing with jQuery</h2>\n<p>If you prefer using a jQuery structure, you can use similar namespacing via the $ object. Using the example above, it&#8217;s the same deal:</p>\n<p>https://gist.github.com/mcavaliere/f93de4bd721d66ace971</p>\n<p>I tend to avoid this approach except for functions that follow the jQuery function convention (i.e., working off of DOM elements and returning a jQuery object). My keeping a separate top-level namespace (MyApp or MyCompany), it makes it a lot easier to distinguish your app&#8217;s custom code from that of jQuery plugins.</p>\n<h2>Namespacing Strategies</h2>\n<p>When looking at a messy JS codebase, I usually try to group things in logical categories. Patterns like this are common:</p>\n<p>https://gist.github.com/mcavaliere/e564f7c65120fe6282a0</p>\n<p>Every once in a while it makes sense to take another look at everything as a whole and reassess whether the organization makes sense. If it doesn&#8217;t, see what might make better sense &amp; do some refactoring.</p>\n<h2>Namespacing Utilities</h2>\n<p>For a touch of elegance, for many years I&#8217;ve used a utility function I got from Ext.js many years ago. With one line of code, you can easily ensure the namespace you need gets instantly created, no matter how many levels deep:</p>\n<p>https://gist.github.com/mcavaliere/865a836c1830c3372e43<br />\nNote that this function should be defined with your top-level namespace, before you define anything else.</p>\n<p>You use the namespace method like this, inside each module&#8217;s file:</p>\n<p>https://gist.github.com/mcavaliere/f75f4a5b2c56a2db8336</p>\n<p>Now it will make sure MyApp, UI and FancySlider sub-namespaces all exist; this is super handy in case your Javascript files are included in an order you don&#8217;t always control (like with the Ruby on Rails asset pipeline, for example).</p>\n<p>That&#8217;s my intro to namespacing. Lots of detailed info for a very simple, but powerful concept. Never write code without it.</p>\n"
  },
  "what-to-do-when-youre-not-working": {
    "id": "cG9zdDo1MjY=",
    "title": "What To Do When You’re Not Working",
    "excerpt": "<p>Being a career freelancer / consultant is great for so many reasons, but in many ways requires a number of shifts out of the typical 9-5 mindset. You have to switch up some of your mental habits to be a better freelancer. Also, just because you are a freelancer, it doesn&#8217;t mean that you can&#8217;t [&hellip;]</p>\n",
    "slug": "what-to-do-when-youre-not-working",
    "date": "2015-12-15T15:11:54",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/12/Fotolia_44161811_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/12/Fotolia_44161811_XS-300x200.jpg 300w, /2015/12/Fotolia_44161811_XS-150x100.jpg 150w, /2015/12/Fotolia_44161811_XS.jpg 424w",
        "mediaDetails": {
          "height": 283,
          "width": 424
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Laptop Life"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Being a career freelancer / consultant is great for so many reasons, but in many ways requires a number of shifts out of the typical 9-5 mindset. You have to switch up some of your mental habits to be a better freelancer. Also, just because you are a freelancer, it doesn&#8217;t mean that you can&#8217;t use some assistance. Even if it is using something like this <a href=\"https://www.deputy.com/au/features/shift-planning\" alt=\"\" title=\"\">Deputy shift planning software</a>, this may be able to make a difference to how you decide to manage your business. This may be something worth considering. </p>\n<p>One mindset you need to acquire is that of being comfortable with times when you&#8217;re without work. Being without work when you&#8217;re a freelance programmer can be scary and worrisome at first. But once you know how to handle it, you&#8217;ll welcome the gaps between projects as time to grow yourself, build your brand and all-out enjoy life.<!--more--></p>\n<h2>Natural anxiety</h2>\n<p>Being anxious when you&#8217;re without work is natural. Your brain&#8217;s tendency is to bug out. &#8220;I&#8217;m not getting a paycheck &#8211; oh shit! I&#8217;m gonna be late on all my bills, get kicked out of my apartment, be homeless, and my girlfriend will leave me. I&#8217;ll die penniless and alone. &#8221;</p>\n<p>The truth is, in most cases none of this will ever, ever happen. It&#8217;s stemming from a natural sense of worry that comes from not having money coming to you regularly. It will pass. You will get a paycheck. You&#8217;ll live happily ever after.</p>\n<h2>The life we chose</h2>\n<p>Part of freelancing is uncertainty and variability. Before you even start freelancing. it&#8217;s good to get comfortable with the nature of the game. If you&#8217;re new to the game, I recommend you read about the <a href=\"http://mikecavaliere.wpengine.com/pros-and-cons-of-freelancing/\">Pros and Cons of Freelancing</a> (and if you&#8217;re not new, it doesn&#8217;t hurt to re-acquiant yourself). Realize that the occasional downtime is just a normal part of the job.</p>\n<h2>Planning for downtime</h2>\n<p>Since the occasional downtime is a likelihood, plan hard for it. When you&#8217;re on a project banging out features and making some well-deserved cash, store it away knowing that the day might come when you have a few days or weeks without billable hours.</p>\n<p>You should already have a sense of what your monthly expenses are. If not, write them into a google spreadsheet ASAP and get some totals in there. You should know a ballpark figure for what you need every month.</p>\n<p>This should include the standard stuff, of course: rent/mortgage, health care, groceries, etc. But include the things you need for your lifestyle as well &#8211; dinner out, movies, whiskey&#8230;whatever you spend on a regular basis, when times are good. Plan for living comfortably when you&#8217;re not working; not scavenging and starving.</p>\n<p>Now when you are working hard, store away a bunch for times like this. I prefer to keep about 3-4 months worth (or more) of expenses in the bank whenever possible.</p>\n<h2>What to do with yourself when you&#8217;re between projects</h2>\n<p>If you&#8217;ve been working a whole lot, the downtime between projects can be an awesome thing. And you can use it for both business purposes as well as personal ones. Remember &#8211; the lifestyle flexibility and extra time you can get from freelancing is part of why you signed up for it in the first place, and if the money isn&#8217;t good enough for you to live comfortably, you could try your hand at investing some of your money earnt from freelancing by utilizing online financial services from <a href=\"https://www.sofi.com/invest/etfs/\">SoFi</a> or others similar. Savor it and make the best of it. If you use a home office, it can&#8217;t hurt to make it more comfortable with a proper desk chair, <a href=\"https://www.phsgreenleaf.co.uk/office-plants/\" alt=\"\" title=\"\">office plant hire</a> to add some greenery and neat and tidy shelves. But you also need to remember to leave the office at the door and get some downtime. </p>\n<p>Here are some things you can and should do with your spare time, whether it&#8217;s a day or a month.</p>\n<h3>Crush some code</h3>\n<p>Downtime is the perfect time to work on personal projects, learn a new programming language or framework, or contribute to open source. For one, <a href=\"http://mikecavaliere.wpengine.com/keep-your-swords-sharp/\">keeping your skills up to par</a> is always vital as a programmer. When you don&#8217;t have to work a bunch of hours, you&#8217;ve got the whole day to bury yourself in learning. This will get you up to speed with new stuff that much faster.</p>\n<p>Second, personal projects and open source contributions are awesome since they build your public credibility up. They&#8217;re massively helpful in getting you work in the future (see: <a href=\"http://mikecavaliere.wpengine.com/get-hired-again-and-again/\">Get Hired Again and Again</a>).</p>\n<h3>Crush some words</h3>\n<p>Writing is very helpful for developers who want to get attention. Just ask <a href=\"http://simpleprogrammer.com/\">John Sonmez</a>, who has courses on self-marketing for programmers; <a href=\"http://simpleprogrammer.com/2013/12/23/marketing-need-blog/\">having a blog is great</a> for your image and your career.</p>\n<p>If you&#8217;re not good at writing, just do it regularly. <a href=\"https://750words.com/\">750 Words</a> is an awesome tool for getting practice. Even if you don&#8217;t do it every day, do it as much as you can and you&#8217;re bound to get better at it. <a href=\"http://lifehacker.com/how-to-stick-to-a-writing-schedule-1653234644\">Writing on a schedule</a> helps a lot, too.</p>\n<p>Original blog posts aren&#8217;t the only valuable form of writing though. <a href=\"https://www.quora.com/\">Quora</a>, <a href=\"http://www.reddit.com/\">Reddit</a>, <a href=\"http://stackoverflow.com/\">StackOverflow</a> &#8211; basically anywhere that has traffic and technical writing is good for your credibility. Other developers&#8217; blogs (like <a href=\"http://mikecavaliere.wpengine.com/blog\">mine</a>) are great places to add comments. Be genuinely helpful and interested, and observe each platform&#8217;s rules of etiquette. But in general, the more online content you generate, the better.</p>\n<h3>Show yo&#8217; face</h3>\n<p>As much as online attention gives you access to millions of potential customers and friends, there&#8217;s no substitute for the quality of in-person communication. The time between projects is a good time to get your face around the community. Go on <a href=\"http://meetup.com\">Meetup</a> and <a href=\"https://www.eventbrite.com/\">Eventbrite</a> and find interesting events in your area. Meet people. Listen to their problems. Offer help where you can. Something may turn into paying projects down the road.</p>\n<h3>Get a hold of your life</h3>\n<p>When we&#8217;re in the zone working a ton, often things of personal importance get pushed aside. Things like doctors appointments, taking care of our homes, regular fitness, or running errands. Fixing that door knob that has been busted for a year. Shit like that. We tell ourselves, &#8220;I&#8217;ll get to it when I have time,&#8221; but we never have time. Then when we do have time, we forget.</p>\n<p>It&#8217;s good to think of the downtime as &#8220;spring cleaning for your life.&#8221; Time to really mop up the stuff in your life that just got pushed under the furniture while you were working a lot. And now it&#8217;s grown into a 3-foot ball of dust, hair, and tortilla chip fragments. Nasty.</p>\n<p>Also: not working in the daytime means you can go to stores (or the bank, etc) at 11am and skip the lines everyone is on at lunch or after their day job. #bestThingEver #freelancePerkBigTIme.</p>\n<h3>Take a vacation</h3>\n<p>Hey, we freelance for personal freedom right? Most people work all year just to get two weeks to get away, and they savor it like crazy by flying somewhere they&#8217;ve never been. You&#8217;re not working right now? Quit freaking out, it&#8217;s a blessing.</p>\n<p>The cool thing is, since you&#8217;ve (hopefully) stocked up money in the bank like a good little freelancer, you can afford to take a reasonably-priced trip. It&#8217;ll be easier to keep track of this if you make a <a href=\"http://www.kristymlopez.com/2018/01/put-your-business-ahead-of-others/\" alt=\"\" title=\"\">blank invoice template</a> and use it when working with payments as a freelancer. And since your schedule is pretty open, it&#8217;s the perfect time to take advantage of the last minute flight deals that typical 9-5 workers usually can&#8217;t. Treat yo&#8217; self!</p>\n<h3>Alternative: make it a workcation</h3>\n<p>There are tons of <a href=\"http://www.businessinsider.com/benefits-reasons-for-taking-a-vacation-right-now-2011-11?op=1\">valid reasons to take a real vacation</a> &#8211; ones that are good for your business. But if you can&#8217;t bear to completely tear yourself away from the keyboard for a week, you can always make it a hybrid trip.</p>\n<p>There&#8217;s also something awesome about taking your laptop to a completely new place and working there. There&#8217;s no one you know to distract you, but there&#8217;s the potential to meet new people everywhere. The new environment means guaranteed excitement; turn that excitement into really productive energy. Then go have a drink with some locals.</p>\n<hr />\n<p>So there it is, your getting started guide to making use of the time when you&#8217;re not working &#8211; and actually appreciating it. Go forth and conquer. And <a href=\"http://mikecavaliere.wpengine.com/what-to-do-when-youre-not-working/#respond\">comment</a> if you&#8217;re feeling talkative.</p>\n"
  },
  "how-to-get-freelance-programming-work-with-no-experience": {
    "id": "cG9zdDo1MTI=",
    "title": "How to Get Freelance Programming Work (With No Experience)",
    "excerpt": "<p>You just graduated with a Computer Science degree. Or finished the Web Development Immersive program at General Assembly, or another programming program (heh). Now what? Maybe you just want some extra help, such as java programming help or maybe you&#8217;re preparing your children for a career in programming, and want to get them enrolled in [&hellip;]</p>\n",
    "slug": "how-to-get-freelance-programming-work-with-no-experience",
    "date": "2015-11-12T09:36:51",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/11/Student-Fotolia_78499015_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/11/Student-Fotolia_78499015_XS-300x222.jpg 300w, /2015/11/Student-Fotolia_78499015_XS-150x111.jpg 150w, /2015/11/Student-Fotolia_78499015_XS.jpg 403w",
        "mediaDetails": {
          "height": 298,
          "width": 403
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Developer Training"
          }
        },
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>You just graduated with a Computer Science degree. Or finished the Web Development Immersive program at <a href=\"https://generalassemb.ly/\" target=\"_blank\" rel=\"noopener\">General Assembly</a>, or another programming program (heh). Now what?</p>\n<p>Maybe you just want some extra help, such as <a href=\"https://bookwormhub.com/programming-help.html\" alt=\"\" title=\"\">java programming help</a> or maybe you&#8217;re preparing your children for a career in programming, and want to get them enrolled in <a href=\"https://community.localmasters.com/improve-your-kids-creativity-with-kids-programming-classes/\" alt=\"\" title=\"\">kids programming classes</a>. What happens when they turn 16/18 though?</p>\n<p>You need a job, naturally. But who&#8217;s gonna hire you?</p>\n<p>It&#8217;s the typical conundrum for any recent grad in any field. Clients want you to have experience&#8230;and you&#8217;ve got none. <strong>How do you get experience without experience?</strong><!--more--></p>\n<p>I encourage newbie coders to do at least a few freelance projects, especially early on in their careers. Freelancing offers a wealth of opportunities to learn, grow, and meet people. And equally importantly, it gives you a way to see what different work environments are like before you settle down.</p>\n<p>But I do understand that when you&#8217;re fresh out of school, it may be even harder to get freelance than it is to get a regular job.</p>\n<p>More specifically &#8211; clients want <em>credibility</em>. They want to know you can get the job done, and be confident that you won&#8217;t waste their time or money. Experience is one indicator of that, but it&#8217;s not the <em>only</em> indicator.</p>\n<h2>Fake it till you make it&#8230;sort of.</h2>\n<p>The truth is, if you have gone to a school of some sort, you don&#8217;t have zero experience &#8211; you did <em>something</em> in school. Any projects you&#8217;ve done are a selling point. Use them, make them look impressive if you can.</p>\n<p>In the meantime, work on getting that experience. And since you&#8217;re pretty new, you&#8217;ll want to take on projects that are really low risk. As many as possible &#8211; then build up to bigger ones.</p>\n<h2>Start small</h2>\n<p>Small projects are like bricks &#8211; you can add them together to make bigger things from them. If you&#8217;ve got 10 tiny projects on your resume, a client will be a lot more inclined to give you a bigger one then the guy with 2. These projects will make you look more experienced and trustworthy, which can get you more jobs in the future. As you start taking on more projects, it&#8217;s likely that you may get even more projects. These can be difficult to manage, which is why this <a href=\"https://bamboosolutions.com/products/project-management-central/\">sharepoint project management</a> software might be extremely useful for freelance programmers to make sure they&#8217;re on track to complete these projects. By using software like this, you shouldn&#8217;t fall behind on projects, making you even more reliable and reputable. Hopefully, this should help you to build your business. </p>\n<p><a href=\"https://www.fiverr.com/\" target=\"_blank\" rel=\"noopener\">Fiverr</a> and <a href=\"https://www.upwork.com/\" target=\"_blank\" rel=\"noopener\">Upwork</a> have an abundance of opportunities for freelance work. They won&#8217;t make you rich &#8211; especially Fiverr, which charges $5 per task typically (upwork has far higher price points, FYI). But use both of them to get a few easy projects you can show off.</p>\n<p>You can also hit up local businesses to do their websites. Your sales pitch is this: every small business needs a website! If you&#8217;re online, people give you a lot more credibility and have a better chance of finding you (beyond just foot traffic). Plus, since you&#8217;re not a pro yet you can do it cheaply for them.</p>\n<h2>Do things, show them off</h2>\n<p>I put together a really simple paradigm for continually getting work (see: <a href=\"http://cavalieredev.wpengine.com/get-hired-again-and-again/\">Get Hired Again and Again</a>). It&#8217;s simple in concept: Do good stuff -> Show it off -> Repeat. Seems like nothing, but it really works.</p>\n<p>&#8220;Do good stuff&#8221; means using your skills on projects, as we talked about above. Coding websites, or building whatever type of technical things you build.</p>\n<p>&#8220;Show it off&#8221; means market yourself. In person at networking events and on your different projects, and online in every conceivable way &#8211; in your portfolio, on other people&#8217;s blogs and so on. (Seriously, <a href=\"http://cavalieredev.wpengine.com/get-hired-again-and-again/\">read the full article</a>.)</p>\n<p>Those two pieces (build stuff, and show them off) are naturally the ones you keep getting better and better at though. And you do them in different proportions at different times, but you should always have a good balance.</p>\n<p><span data-sumome-listbuilder-embed-id=\"5d4f1ddf45fb7da701fe2e2f3062fed64b1685bb068780195409a8eb3eed92dd\"></span></p>\n<h2>Talk about it</h2>\n<p>When you&#8217;ve only got a little experience, you need to do all of this more &#8211; more building (those small projects on fiverr, upwork, etc) and more showing off (on your own portfolio website, Fiverr / Upwork portfolios, etc). If you do stuff on Upwork, don&#8217;t forget to ask the clients for reviews afterwards.</p>\n<p>Make sure you have a <strong>personal website</strong>. This is not only good practice, but it&#8217;s experience to show off. Even if you built it using a bootstrap template and customized it, you still did work on it. Be honest if anyone asks, but if they don&#8217;t let them assume you did it. But make sure you impress them with your level of knowledge.</p>\n<p>And don&#8217;t forget to put code on your <strong><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github profile</a></strong>. Forking repos and making open source contributions are great; personal projects of any kind are fantastic as well, no matter how small.</p>\n<h2>Post, post, post</h2>\n<p>All throughout your career, you should be learning new technologies and getting better at the ones you know (see: <a href=\"http://cavalieredev.wpengine.com/keep-your-swords-sharp/\">Keep Your Swords Sharp</a>). Talk about it! It&#8217;s easy as pie to start a blog on <a href=\"http://wordpress.com\" target=\"_blank\" rel=\"noopener\">wordpress.com</a> or <a href=\"https://medium.com/\" target=\"_blank\" rel=\"noopener\">medium.com</a>.</p>\n<p>Writing technical blog posts shows what you know. Even if you&#8217;re just learning something, writing about the learning experience shows ambition and passion for the craft of coding. That drive is a big part of what clients look for in hires.</p>\n<p>Also, any online community you belong to can help you show what you know, and link back to your portfolio. <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">StackOverflow</a>, <a href=\"https://www.reddit.com/\" target=\"_blank\" rel=\"noopener\">Reddit</a>, <a href=\"https://www.quora.com/\" target=\"_blank\" rel=\"noopener\">Quora</a>, <a href=\"https://news.ycombinator.com\" target=\"_blank\" rel=\"noopener\">Hacker News</a>. Anytime someone has a question you can answer, that&#8217;s a potential credibility point you just added to your online presence.</p>\n<h2>Network, network, network</h2>\n<p>If you&#8217;re not on <a href=\"https://www.linkedin.com/\" target=\"_blank\" rel=\"noopener\">LinkedIn</a>, get on there and add anyone you know from the business world. Dress up your profile, link it back to your portfolio site. join some LinkedIn groups, and post there too.</p>\n<p>Go to meetups in your city often. <a href=\"http://www.meetup.com/\" target=\"_blank\" rel=\"noopener\">Meetup</a> and <a href=\"https://www.eventbrite.com/\" target=\"_blank\" rel=\"noopener\">Eventbrite</a> are your best buds, and if your city has tech mailing lists join those too. Getting your face visible in the tech community is great for a bunch of reasons. You can not only learn from other people and meet other programers like you, but you can meet potential clients. And if someone likes you, but can&#8217;t hire you for whatever reason, they might know someone who can.</p>\n<p>Have cheap business cards made up. <a href=\"http://www.vistaprint.com/category/business-cards.aspx\" target=\"_blank\" rel=\"noopener\">VistaPrint</a> has had low-cost options for decades. No one should expect them to be top notch since you&#8217;re new &#8211; but simply having one gives someone an easy way to contact you. And it makes you look a notch more professional than other recent grads.</p>\n<p>Remember, there&#8217;s a trade off: in-person networking takes more time and reaches fewer people than online networking, but has a far greater impact since people can see you and get to know you. It&#8217;s easier to trust someone you can see face to face; anyone can fake an online identity.</p>\n<h2>Amp up the social skills</h2>\n<p>Not everyone is natively social, and that may be particularly true with programmers. (I sure as hell wasn&#8217;t, decades ago.) Many of us are natively technical, but not so natively social. This can be worked on though. Start with programming events, where the people there are more likely to be just like you. Ask them how they got their jobs, what technologies they&#8217;ve learned and so on. Then gradually step out of your comfort zone, and try meetups that are a little less technical.</p>\n<p>Gradually your level of comfort will improve in some cases. Truthfully though, improving your social skills is a far bigger discussion than these two paragraphs; just know that it&#8217;s not only possible to make yourself more comfortable with networking, but it&#8217;s really really great for your career.</p>\n"
  },
  "2015-11-05-stuff-you-should-know-this-week": {
    "id": "cG9zdDo1MDQ=",
    "title": "Stuff You Should Know This Week",
    "excerpt": "<p>The technology industry moves fast. Stuff is happening all day long, and all night &#8211; since there are developments going on all over the world in Europe, Asia and so on. So I read as much as I can to keep my skills relevant and know about as much going on as possible. Here&#8217;s a [&hellip;]</p>\n",
    "slug": "2015-11-05-stuff-you-should-know-this-week",
    "date": "2015-11-05T21:25:02",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/07/Tech-Stuff-Fotolia_81225978_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2018/07/Tech-Stuff-Fotolia_81225978_XS-300x292.jpg 300w, /2018/07/Tech-Stuff-Fotolia_81225978_XS-150x146.jpg 150w, /2018/07/Tech-Stuff-Fotolia_81225978_XS-45x45.jpg 45w, /2018/07/Tech-Stuff-Fotolia_81225978_XS.jpg 351w",
        "mediaDetails": {
          "height": 342,
          "width": 351
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Laptop Life"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>The technology industry moves fast. Stuff is happening all day long, and all night &#8211; since there are developments going on all over the world in Europe, Asia and so on. So I read as much as I can to keep my skills relevant and know about as much going on as possible.</p>\n<p>Here&#8217;s a collection of stuff I found interesting this week. Data on front-end tools, an interactive programming course, a device digital nomads are gonna love, and a post on how to sell yourself better.<!--more--></p>\n<h2><a href=\"https://learn.co/\">Learn.co</a> from the Flatiron School</h2>\n<p>The Flatiron School allegedly has a <a href=\"http://www.fullstackacademy.com/learntocode\">huge success rate</a> with their students. They teach them to code, and reportedly get almost all of them jobs after graduation.</p>\n<p>They just launched is <a href=\"https://learn.co/\">Learn.co</a>, an online learning platform that actually seems to teach practical skills. For example: you have coding lessons right there in your browser, and when you click a button it forks a GitHub repository and opens up your editor for you. It holds your hand through actual (VERY relevant) tasks like this, and then takes the training wheels off for you to do them manually when you&#8217;re ready.</p>\n<p>I find this hugely appealing since lots of interactive training seems to walk you through fundamentals (like programming language constructs), but often leaves out very important job skills like working with repositories, deploying, or testing code using different methods like <a href=\"https://blog.parasoft.com/how-does-static-analysis-prevent-defects-and-accelerate-delivery\">static analysis</a> etc. This tool looks very promising.</p>\n<h2>How To Market Your Programming Services</h2>\n<p><a href=\"http://simpleprogrammer.com\">John Sonmez</a> on <a href=\"http://simpleprogrammer.com/2015/11/04/how-to-market-your-programming-services/\">the art of self promotion for programmers</a>. He talks about the types of visitors to your website to consider, and how to design around them.</p>\n<p>For many, the hardest part of being successful as a programmer &#8211; particularly a freelance one &#8211; isn&#8217;t the coding itself! It&#8217;s selling yourself. Lots of us are naturally comfortable with coding, but not so much with self-promotion. I myself learned it gradually over time, and am always looking to improve it &#8211; especially in the online world.</p>\n<h2>HTML5 &#8211; Can&#8217;tStopWon&#8217;tStop</h2>\n<p>Knowing HTML5 well is no longer the exclusive domain of front-end developers: it&#8217;s <strong>mandatory</strong> as 63% of business apps are being created in it, and it&#8217;s growing fast. Check the data in this research study TechCrunch covered:  <a href=\"http://techcrunch.com/2015/10/28/html5-on-the-rise-no-longer-ahead-of-its-time/\">HTML5 On The Rise: No Longer Ahead Of Its Time</a>.</p>\n<p>However exact this study might be, there&#8217;s no arguing that HTML5 is essential. And if you&#8217;re a front-end developer &#8211; especially a <strong>freelance front-end developer</strong> &#8211; it&#8217;s more important than ever that you keep your HTML up to date. Along with your Javascript, of course &#8211; which leads us to the next one&#8230;</p>\n<h2>Developers aren&#8217;t using ES6 yet!</h2>\n<blockquote class=\"twitter-tweet\" data-width=\"550\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">Are you using ES6 for the majority of your JavaScript programming yet?</p>\n<p>&mdash; JavaScript Daily (@JavaScriptDaily) <a href=\"https://twitter.com/JavaScriptDaily/status/660074434821246976?ref_src=twsrc%5Etfw\">October 30, 2015</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>At least, that&#8217;s this JavaScript Live Twitter poll says, for what that&#8217;s worth. I&#8217;ll say this though: I&#8217;m honestly not using ES6 primarily yet, but it&#8217;s high up on the todo list.</p>\n<p>If you don&#8217;t know what ES6 is, it&#8217;s what the Javascript language will be in the not-so-distant future. Browsers will eventually let you write like this. To make your skills relevant and future-proof (i.e., they&#8217;ll still be relevant when the browsers make ES6 mandatory), it&#8217;s best to learn it now.</p>\n<p>You can start using the features in ES6 now, though, by running your code through a transpiler like <a href=\"http://babeljs.io/\">Babel</a>.</p>\n<p>There&#8217;s a crash course on ES6 by Smashing Magazine, check it out here:  <a href=\"http://www.smashingmagazine.com/2015/10/es6-whats-new-next-version-javascript/\">ECMAScript 6 (ES6): What&#8217;s New In The Next Version Of JavaScript</a></p>\n<p>Take this poll with a grain of salt though; I&#8217;ll be looking for a significantly bigger data set than this. But if it&#8217;s anything like this survey, it looks like a lot of us are behind the curve.</p>\n<h2>Karma wifi hotspot</h2>\n<p>I&#8217;ve heard about <a href=\"https://yourkarma.com/\">Karma</a> before; it&#8217;s a little wifi hotspot with really flexible data plans. After seeing it demoed at the <a href=\"http://www.meetup.com/ny-tech/\">New York Tech Meetup</a> this week, I&#8217;m dying for one. The mobile app looks sick &#8211; you can track your usage by the month, day, hour.</p>\n<p>And the data plans are even more impressive than I though. You also get 100MB free when you let a new user join the hotspot &#8211; which sounded like a fairly quick way to get free data (as long as they&#8217;re not watching netflix on it). Can&#8217;t wait to try one of these puppies out!</p>\n"
  },
  "throw-away-your-code": {
    "id": "cG9zdDo0NzQ=",
    "title": "F**k Going Green: Throw Away Your Code",
    "excerpt": "<p>Someone once said there are two types of writers: those that try to get a line perfect before writing the next one, and those who dump everything out fast and revise it later. The latter are often much, much more prolific (or so I hear). Programmers fall into those categories too. We have natural tendencies [&hellip;]</p>\n",
    "slug": "throw-away-your-code",
    "date": "2015-10-19T14:10:29",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/10/trash.jpg",
        "altText": "Garbage can image with computer parts sticking out of it",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/10/trash-300x300.jpg 300w, /2015/10/trash-150x150.jpg 150w, /2015/10/trash.jpg 346w",
        "mediaDetails": {
          "height": 346,
          "width": 346
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Someone once said there are two types of writers: those that try to get a line perfect before writing the next one, and those who dump everything out fast and revise it later. The latter are often much, much more prolific (or so I hear).</p>\n<p>Programmers fall into those categories too. We have natural tendencies to one or the other, but we can definitely encourage ourselves in either direction.<!--more--></p>\n<p>I’m a big fan of the latter camp: get’er done fast, clean’er up later.</p>\n<p>I’ve tried both methods. I find that when I try to do things 100% right the first time, I end up wasting lots of time. The second method gets it done a lot faster.</p>\n<blockquote><p>“I think there are two types of writers, the architects and the gardeners. The architects plan everything ahead of time, like an architect building a house&#8230;The gardeners dig a hole, drop in a seed and water it&#8230;as plant comes up and they water it, they don&#8217;t know how many branches it&#8217;s going to have, they find out as it grows. And I&#8217;m much more a gardener than an architect.”</p>\n<footer>&#8211; George R.R. Martin</footer>\n</blockquote>\n<h2>“Perfect&#8221; is the Enemy of “Done.&#8221;</h2>\n<p>I don’t know who came up with this quote, but it’s become a mantra for me over the years. I used to obsess over doing things the &#8220;right way.&#8221; (ADHD people are often prone to both perfectionism AND silly mistakes &#8211; ironically.) I found that trying to get every aspect of my work perfect caused me to take far longer to do things than I wanted. And the real reason I did it was to satisfy my own need to get things right &#8211; with my job requirements secondary.</p>\n<p>The truth is, non-technical people &#8211; the people who normally pay our salaries &#8211; often appreciate results rather than form. It’s a lot safer to take care of the job requirements first, then your own concerns second.</p>\n<p>I’m not telling you to do crappy work, obviously &#8211; you’ll get yelled at in code reviews without a doubt. But I encourage you to accept that “good, though imperfect” is far better than “perfect, but unfinished.&#8221;</p>\n<h2>Buddhist Coding: Practicing Non-Attachment</h2>\n<p>If you love the craft of coding, it’s easy to get attached to something you wrote, or hellbent on doing it “right.” It’s ok. It shows you care about the quality of your work. And maybe you care about the respect of your peers. These are good things.</p>\n<p>But there’s a fine line between “caring about doing good work” and “being perfectionistic.” If you spend so much time trying to do something “the right way,” even though other people are telling you it’s good enough &#8211; you may be wasting time unnecessarily.</p>\n<h2>One Time’s Rarely a Charm</h2>\n<p>The reason concepts like “pseudocode” and “rapid prototyping” exist is because both coding and product development are hard to get perfect the first time around. Writers create drafts (and often multiple revisions) before they output a finished work. Even good bloggers have editors. So I encourage people to think of your initial batch of a code as a first draft &#8211; get it written, then review and clean it up later.</p>\n<h2>Drafts Lead You to the Right Solution</h2>\n<p>Sometimes you’ll write a fast outline-solid of your code, then at some point realize it was the wrong approach. This is natural. A writing teacher once taught me a great phrase: “I didn’t know what I thought…until I saw what I said.” This ugly first draft is a natural step in the process. Embrace it. Then scrap it and write the better version.</p>\n<h2>Get it Done vs Get it Right</h2>\n<p>There is a time and a place for each approach.</p>\n<p>If you’re working on an experimental product for example &#8211; a startup’s MVP, or a demo product your company wants to test out (since they don’t know if people will pay for it) &#8211; aiming for “good enough” is often more feasible than “unbreakable.” You don’t even know if your customers care enough to WANT the product yet. Ship that thing as fast as you can and find out.</p>\n<p>In another example, let’s say you have a crucial feature that makes a bunch of money for your company, but it’s fairly slow, and needs a snappier rewrite. The stakes are much higher &#8211; if this feature isn’t done well, the team will lose that cash. So you’d better think it through, and do some speed testing before you ship it. Launch it to a small subset of users if you can as well &#8211; before it goes out to everyone.</p>\n<p>I do a mental cost-benefit analysis every time I’m coding or even planning a product. Or if I’m maintaining a public app, I’ll approach each feature this way. If you’re a freelancer, or plan to do anything beyond career coding &#8211; management, entrepreneurship, product, etc &#8211; I highly recommend practicing this.</p>\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"http://mikecavaliere.wpengine.com/throw-away-your-code/#respond\">Leave a reply.</a></b></p>\n"
  },
  "fk-you-programmers-arent-confrontational": {
    "id": "cG9zdDo0NTI=",
    "title": "Programmers Aren’t Confrontational. F**k you!",
    "excerpt": "<p>I was reading an interview with developer Mark Dalgleish recently. He mentions how important it is that we as developers do something about our confrontational nature. I think it&#8217;s a little exaggerated to say we have a &#8220;confrontational nature.&#8221; Maybe even a little insulting, and over-generalized. But I think there&#8217;s fact in the idea that there&#8217;s sometimes a [&hellip;]</p>\n",
    "slug": "fk-you-programmers-arent-confrontational",
    "date": "2015-09-18T14:33:06",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/09/Fotolia_54351226_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/09/Fotolia_54351226_XS-300x300.jpg 300w, /2015/09/Fotolia_54351226_XS-150x150.jpg 150w, /2015/09/Fotolia_54351226_XS.jpg 346w",
        "mediaDetails": {
          "height": 346,
          "width": 346
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>I was reading an interview with developer <a href=\"http://markdalgleish.com/\">Mark Dalgleish</a> recently. He mentions how important it is that we as developers <a href=\"https://medium.com/@ReactiveConf/mark-dalgleish-developers-need-to-address-their-confrontational-culture-as-a-priority-c615e15ec323\">do something about our confrontational nature</a>.</p>\n<p>I think it&#8217;s a little exaggerated to say we have a &#8220;confrontational nature.&#8221; Maybe even a little insulting, and over-generalized. But I think there&#8217;s fact in the idea that there&#8217;s sometimes a subtle tendency toward defensiveness in our profession. Not everywhere, but here and there.<!--more--></p>\n<h2>Respect (just a little bit)</h2>\n<p>When developers get good at something, we often get opinionated about it, which is 100% fine. But sometimes we take it a step further, and we get a little touchy when someone disagrees. Or as <a href=\"https://medium.com/kamil-lelonek-personal-blog/why-developers-don-t-understand-one-another-253c2516ba50\">this article</a> mentions, we sometimes treat inquiries as criticism (or worse, attacks). Or we&#8217;re quick to mock or discredit people for their imperfections. I think <a href=\"http://mikecavaliere.wpengine.com/dont-get-attached-programming-languages/\">sometimes we get too attached</a> to our technologies. And to our opinions.</p>\n<p>Respectfully disagreeing is healthy. But imagine getting verbally (or physically) bitch-slapped every time you questioned something your parent did. If this actually happened to you, your childhood was fucked up. Sorry. A parent should be mature enough to say no to a kid most of the time without snapping and giving that kid a micro-trauma. I&#8217;m sorry that happened to you. They were a-holes, and you&#8217;re better than them.</p>\n<p>On the other hand healthy, civil debate is what success is made of. Relationships grow from positive back-and-forth. Brainstorming sessions go better. Companies grow. Partnerships are fruitful. It&#8217;s the stuff chemistry is made of.</p>\n<p>This is what code reviews are all about. People look at our code, and offer suggestions on how to make it better. The advice is free. And like all free things we can take it or leave it. Picking a fight about it will only prevent us from getting better.</p>\n<h2>C&#8217;mon. How big a problem is this, really?</h2>\n<p>I really don&#8217;t know. If you&#8217;ve got data on this, post it in the comments. I can say that I&#8217;ve worked at places where it&#8217;s prominent, and worked at places where it&#8217;s completely absent.</p>\n<p>I&#8217;ve seen it far more on the internet, where people are quick to flame others for their mistakes, or disagreement is met with harsh resistance. But I&#8217;ve also seen threads online where people can have meaningful conversations even though they have drastically opposite beliefs. Like, Republican vs Democrat type opposite (whatever the tech version of that is). Real polite-like though.</p>\n<h2>Practice empathy &amp; patience. Even if you&#8217;re awesome.</h2>\n<p>Many of you may not even need this advice. I hope that&#8217;s the case. Feel free to ignore it. But I think I&#8217;m pretty good in this area, and I certainly know there&#8217;s room for improvement. I continue to work on my empathy and soft skills regularly, treating them like my coding skills, and I encourage you to do so also.</p>\n<p>Not because there&#8217;s anything wrong with us. But because these things just make us better developers, are GREAT for our careers, and great for our lives as well.</p>\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"http://mikecavaliere.wpengine.com/fk-you-programmers-arent-confrontational/#respond\">Leave a reply.</a></b></p>\n"
  },
  "what-your-client-really-wants": {
    "id": "cG9zdDo0NDM=",
    "title": "What Your Client REALLY Wants",
    "excerpt": "<p>As developers, we love to code, build, create, invent. As consultants our livelihood is dependent on this; yet, I believe we have a certain responsibility to decline jobs when they’re not warranted (See: The Importance of Saying NO). Far too often in the past I&#8217;ve seen tech built when tech doesn’t need to be built. [&hellip;]</p>\n",
    "slug": "what-your-client-really-wants",
    "date": "2015-09-09T09:00:42",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/07/what.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2018/07/what-300x200.jpg 300w, /2018/07/what-150x100.jpg 150w, /2018/07/what-400x267.jpg 400w, /2018/07/what.jpg 424w",
        "mediaDetails": {
          "height": 283,
          "width": 424
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>As developers, we love to code, build, create, invent. As consultants our livelihood is dependent on this; yet, I believe we have a certain responsibility to decline jobs when they’re not warranted (See: <a href=\"http://mikecavaliere.wpengine.com/the-importance-of-saying-no/\">The Importance of Saying NO</a>).</p>\n<p>Far too often in the past I&#8217;ve seen tech built when tech doesn’t need to be built. Startups that want to build a &#8220;platform&#8221; before they’ve got a business model. SMBs that think by just having a website their internet presence will grow. Brands that think having a cool, branded app with the latest hi-tech whatever will increase sales and recognition. <!--more--></p>\n<p>The truth is, most of the time these ideas are unfortunately baseless. A complex platform will only work if you’ve validated the model (and even then, there are tons of risks). A website without promotion will never be seen, this being why it would be a better idea to hire an agency like <a href=\"https://irn.agency/\">https://irn.agency/</a> or other marketing agencies to actually promote and market your business, service and product. An app will only increase sales if it can connect with buyers with the product in a way they weren’t already connecting.</p>\n<p>Without some kind of validation, all of these things are just ideas. Beautiful, expensive, risky, probably wasteful ideas.</p>\n<h2>What&#8217;s the real goal?</h2>\n<p>Most of the time these ideas are motivated by genuine goals every business has. More customers, more sales per customer, more name recognition and so on. Whatever tech thing (website, app, etc) they want to build is an attempt to further one or more valid business goals. Small or new businesses may want to try digital transformation to help make their business more effective in the long run, as it can help you to know what your client&#8217;s needs are. A company like Vantiq (<a href=\"https://vantiq.com/\">https://vantiq.com/</a>) has helped many companies to transform their business by using this type of technology. More valid business goals tend to be the aim of many businesses. The easy trap to fall into is considering it a guarantee (or likelihood) without any kind of evidence.</p>\n<p>Sure, and app with a giant dancing chicken on it might drive more customers to my car dealership. I’d better have some real data to back that assumption before I go dropping tens of thousands of bucks on design and development costs.</p>\n<p>The key piece of advice I give to clients in these cases is to accept that you’re making assumptions, and try to change that habit. Treat these things as hypothesis instead of guarantees, and you’ll be a lot less likely to drop tons of money on something that doesn’t advance your business.</p>\n<p>This is challenging for consulting teams since it seems to violate our own business model. We get paid to build things! (I do a lot more than that, including developer training and product stuff, but that’s besides the point.) In reality this is far from the truth.</p>\n<h2>Long-term credibility over short-term cash</h2>\n<p>The truth is, we gain a lot more from steering the client in a direction that is better for them than we do from just taking their money and building them anything their heart desires.</p>\n<p>In any business, you want your customers to feel like they&#8217;re gaining more than they&#8217;re spending. If you can save someone a ton of money without them spending anything, they&#8217;ll love you for it and come back. It’s the same reason we give away free content on websites; it prevents them from ever feeling like they’re being suckered.</p>\n<p>It’s no different with doing development work for hire. By all means pay the bills, but aim to land projects that leave both client and developer happy with the result.</p>\n<h2>How do I find out what the client really needs?</h2>\n<p>I always ask detailed questions about their business to get a sense of where their real bottlenecks are. Sometimes a client will think they need to get more traffic, when they’ve already got a bunch that they just need to make use of better.</p>\n<p>I ask about their business model. If their approach sounds like &#8220;we&#8217;ll make money once we build this,&#8221; I ask them how they know. If they’ve done a lot of customer research (and done it really well), then maybe they&#8217;re onto something. If they haven&#8217;t done any, the only thing they should be building is an <a href=\"https://en.wikipedia.org/wiki/Minimum_viable_product\">MVP</a> &#8211; which generally shouldn&#8217;t be an app, it should as simple as some landing pages, surveys or other low-investment validation.</p>\n<p>For existing businesses, I ask about their metrics. If they don’t have any, that&#8217;s a red flag. If on the other hand, they know they&#8217;ve got high acquisition numbers and low retention numbers, then building features for them to increase retention may not be such a bad idea. Otherwise, collecting numbers for each of the <a href=\"http://500hats.typepad.com/500blogs/2007/09/startup-metrics.html\">AARRR</a> stages should be their first step.</p>\n<h2>Shut up and code? Not really.</h2>\n<p>There are definitely projects that are already in motion and hire freelance developers as an extra set of hands. Or they&#8217;re clear on their product direction, and are hiring us solely for our technical chops. In that case the job is clean cut &#8211; get&#8217;er done as fast and effectively as possible.</p>\n<p>In other cases &#8211; such as where the client isn&#8217;t natively technical, or they&#8217;re looking us to head up the project &#8211; we owe it to them to keep their best interests at heart. Anytime we can point them in a direction that is more focused on actual returns for them, we’re building our reputation by giving them actual results &#8211; rather than trading money for labor.</p>\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"http://mikecavaliere.wpengine.com/what-your-client-really-wants/#respond\">Leave a reply.</a></b></p>\n"
  },
  "ethics-for-freelance-programmers": {
    "id": "cG9zdDo0MzA=",
    "title": "Ethics for Freelance Programmers",
    "excerpt": "<p>Ethics is a topic rarely, if ever talked about among freelance developers. Some of the more successful developers I know definitely have a sense of what&#8217;s right and what&#8217;s wrong in our business. At the very least, they do the best job possible since their credibility is at stake. But more often our conversations revolve [&hellip;]</p>\n",
    "slug": "ethics-for-freelance-programmers",
    "date": "2015-08-21T16:20:53",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/07/ethics-tablet.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2018/07/ethics-tablet-300x200.jpg 300w, /2018/07/ethics-tablet-150x100.jpg 150w, /2018/07/ethics-tablet-400x267.jpg 400w, /2018/07/ethics-tablet.jpg 424w",
        "mediaDetails": {
          "height": 283,
          "width": 424
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Ethics is a topic rarely, if ever talked about among freelance developers.</p>\n<p>Some of the more successful developers I know definitely have a sense of what&#8217;s right and what&#8217;s wrong in our business. At the very least, they do the best job possible since their credibility is at stake. But more often our conversations revolve around code and clients, and rarely do we discuss our shared ideas of right vs wrong in business, unless it comes up situationally.</p>\n<p>If you are a freelancer and haven&#8217;t yet put some thought into what your own personal &#8220;code of ethics&#8221; is, let me give you some food for thought.<!--more--></p>\n<p>Here are some things I think are good or bad to do as a freelancer. In the end I tend not to think of these as absolute right or wrong things to do; the &#8220;good&#8221; things are far less likely to have bad repercussions, and if they do, you can stay strong in them knowing that you&#8217;re not intending to do wrong to anyone. The &#8220;bad&#8221; things are risky, potentially selfish, and likely to leave you in the middle of a painful situation.</p>\n<h2>Bill carefully and accurately.</h2>\n<p>Clients pay us by the hour, and we tend to cost per hour more than permanent employees. So we owe it to the client to not burn their money unnecessarily. Time spent on anything directly related to the project is billable; time on the phone with your girlfriend is generally not.  You may also want to look into getting help with your accounting and bookkeeping to make sure that you are keeping track of your expenses for tax purposes. There are a lot of places you can find out information on taxes for freelancers, for example somewhere like <a href=\"http://daveburton.nyc/taxes-for-freelancers\">http://daveburton.nyc/taxes-for-freelancers</a> is one of many places where you can find information on taxes for freelancers. So you can track your accounts while working for yourself. There is also software available that can aid with keeping track of payments, bills, and quotes from your clients. If you are looking for software that could help you keep track of invoices and quotes you might be interested in something like <a href=\"https://www.salesforce.com/products/cpq/resources/sales-quote-software-helps-small-businesses/\" alt=\"\" title=\"\">Sales quote software</a> to help your business stay on track. </p>\n<h2>Track what you work on.</h2>\n<p>Nobody likes to receive a big fat bill and not know where their money went. This leads to buyers remorse, or even worse &#8211; people not paying their bill. Using an <a href=\"https://www.hiveage.com/free-invoice-generator/\" alt=\"\" title=\"\">invoice maker</a> should be able to help you keep on top of what your billing. </p>\n<p>An itemized invoice (combined with constant communication and expectation setting) makes it far less likely that there will ever be payment disputes. So as you work, take notes on what you&#8217;re doing (I use Evernote, but whatever works), and writing up the timesheet will be a piece of cake. You might also want to look into software that can keep track of receipts, that way, you can see what you charged for previous jobs and have an idea of what to charge going forward. If you are interested in expense tracking, you can check out <a href=\"https://www.filecenterdms.com/receipts-overview.html\">this software</a> by FileCenter.\t  </p>\n<h2>Do a good job (obviously&#8230;but there&#8217;s more to it).</h2>\n<p><a href=\"http://mikecavaliere.wpengine.com/keep-your-swords-sharp/\">Write good code</a>, be responsible&#8230;obviously. But there&#8217;s more to doing a good job than those basics.</p>\n<p>I define &#8220;a good job&#8221; as one which ends with both a happy customer and a happy developer. The client gets something that fills their needs, and you have your integrity and budget intact.</p>\n<p>I do not define &#8220;a good job&#8221; as bending over backwards with no reward. I also don&#8217;t define it as building tons of stuff the client doesn&#8217;t realize they don&#8217;t need. (See the next 2 points below.)</p>\n<h2>Be honest about what you can and can&#8217;t do.</h2>\n<p>There&#8217;s no shame in saying &#8220;I&#8217;m not sure how to do that,&#8221; or &#8220;Let me research that a bit before I say yes.&#8221; Avoid the trap of saying &#8220;yes&#8221; to everything, and getting in over your head (related: <a href=\"http://mikecavaliere.wpengine.com/the-importance-of-saying-no/\">The Importance of Saying NO</a>).</p>\n<p>Note: If you find yourself saying &#8220;no&#8221; to a lot of things, something is probably wrong. Most likely you either need to spend more time updating your skills, or you&#8217;re on a project that just isn&#8217;t right for you.</p>\n<h2>Question whether you&#8217;re building the right thing &#8211; within reason.</h2>\n<p>I pride myself on trying to stay in touch with the client&#8217;s needs. Sometimes their perceived needs aren&#8217;t what they really need (See <a href=\"http://mikecavaliere.wpengine.com/dont-eat-the-candy/\">Don&#8217;t Eat the Candy</a> for one example).</p>\n<p>If you can spot this, and help them focus your development work on something more valuable for their goals, you&#8217;ll score major points with them.</p>\n<p>This isn&#8217;t always a possibility though, if you have an unreceptive client, or your role on the project is purely to get done technical tasks. Choose your battles carefully, which leads to my next point:</p>\n<h2>Don&#8217;t overstep your role.</h2>\n<p>On some projects you might be the lead, and directly in touch with the important shareholders (CEO, Product Manager, etc). In cases like this, you have the ear of people that make product decisions. If you feel you&#8217;re working on the wrong thing, they will probably be inclined to listen to you.</p>\n<p>On the other hand, if you&#8217;ve been hired as &#8220;extra hands&#8221; on a project (for example, an existing team has a huge backlog of features to build, and a tight deadline), and you don&#8217;t have access to any of these people, the team might be less inclined to listen unless you can indicate a huge, very obvious time saver. Be very picky about making recommendations.</p>\n<h2>Don&#8217;t be quick to blame the client.</h2>\n<p>Try to take as much ownership of the situation as possible. True, we&#8217;ll inevitably end up in some bad projects with bad clients sometimes. It&#8217;s important that we be proactive when we end up in these situations. There&#8217;s no shame in saying &#8220;this project isn&#8217;t for me&#8221; and bowing out when you realize it.</p>\n<p>In all other cases, try to take as much ownership as possible. Maybe the client picked an outdated technology to work with; if you&#8217;ve said your peace on that issue, and taken the project anyway, no more reusing that argument. If you didn&#8217;t speak up, maybe you should have. Better late than never.</p>\n<p>Either way, the point is this: no matter the situation, there&#8217;s usually something you can do to help make things go well. Withhold blame until you&#8217;ve <em>really</em> done all you can.</p>\n<h2>Set expectations, as best as possible, at all times.</h2>\n<p>I can&#8217;t stress this enough: As a freelance developer your whole job isn&#8217;t simply churning out code all the time. THE most important part of any project is that you and the client are on the same page, and have a shared understanding at all times. Keep this in mind at the start, in the middle, and toward the end of any project.</p>\n<p>Above all, be communicative, inquisitive and honest. In this game, reputation is everything.</p>\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"http://mikecavaliere.wpengine.com/ethics-for-freelance-programmers/#respond\">Leave a reply.</a></b></p>\n"
  },
  "keep-your-swords-sharp": {
    "id": "cG9zdDo0MTk=",
    "title": "Keep Your Swords Sharp",
    "excerpt": "<p>No matter how long you&#8217;ve been in this business, you should keep practicing the craft of coding. The better you get at what you do, the easier things will start to become. You&#8217;ll get gigs easier. Tasks that used to take you an hour will take you 30 mins. Your confidence will grow, and so will [&hellip;]</p>\n",
    "slug": "keep-your-swords-sharp",
    "date": "2015-08-16T11:15:21",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2018/07/Fotolia_78258011_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2018/07/Fotolia_78258011_XS-300x199.jpg 300w, /2018/07/Fotolia_78258011_XS-150x100.jpg 150w, /2018/07/Fotolia_78258011_XS-400x265.jpg 400w, /2018/07/Fotolia_78258011_XS.jpg 425w",
        "mediaDetails": {
          "height": 282,
          "width": 425
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Laptop Life"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>No matter how long you&#8217;ve been in this business, you should keep practicing the craft of coding.</p>\n<p>The better you get at what you do, the easier things will start to become. You&#8217;ll get gigs easier. Tasks that used to take you an hour will take you 30 mins. Your confidence will grow, and so will your bank account.</p>\n<p>After a while some things will become automatic. You&#8217;ll get into a rhythm on a daily basis, and your career will seem like it&#8217;s coasting.</p>\n<p>When things are good, it&#8217;s easy to let them coast. Don&#8217;t get too comfy here, or you can end up slacking.<!--more--></p>\n<h2>Sharpening the Swords</h2>\n<p>With technical skills, it&#8217;s a must that you challenge yourself regularly. Learning new frameworks and tools is one way. Learning theory is another. Drilling (aka, practicing techniques repetitively) is another, far underrated way of keeping your skills up &#8211; muscle memory, baby!</p>\n<blockquote><p>I fear not the man who has practiced 10,000 kicks once, but I fear the man who has practiced one kick 10,000 times.</p>\n<p><cite>&#8211; Bruce Lee</cite></p></blockquote>\n<p>Soft skills &#8211; practice these too. If you find yourself coding without human contact for weeks on end, get out of the house and socialize. If you don&#8217;t have social skills, get some. (That&#8217;s is a whole endeavor unto itself &#8211; very achievable though).</p>\n<h2>Coast, But Not Too Long</h2>\n<p>Don&#8217;t get me wrong. When you&#8217;re good at something, ride that wave. There&#8217;s nothing like the feeling of success, confidence in your ability, and constant flow. But too much of that will make your skills slip.</p>\n<p>Samurai sharpened their weapons regularly. Soldiers and police dismantle and clean their guns, and practice at the range. Olympic athletes keep practicing long after they get the gold &#8211; hell, even after they retire.</p>\n<p>Keeping your skills sharp isn&#8217;t just what builds your career in the first place. It&#8217;s what takes you past your career and into your legacy &#8211; whatever that may be.</p>\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"http://mikecavaliere.wpengine.com/keep-your-swords-sharp/#respond\">Leave a reply.</a></b></p>\n"
  },
  "how-to-pick-a-good-coffice": {
    "id": "cG9zdDozNzY=",
    "title": "How to Pick a Good Coffice",
    "excerpt": "<p>Across the world, coffee shops with free wifi and great caffeination options have become great workplace options for everyone from students to freelancers to startup founders. I&#8217;ve worked from tons upon tons of them in almost every city I&#8217;ve traveled to, and I&#8217;m constantly getting better at finding ones I like. And I know a [&hellip;]</p>\n",
    "slug": "how-to-pick-a-good-coffice",
    "date": "2015-08-09T11:00:37",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/08/Fotolia_78189706_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/08/Fotolia_78189706_XS-300x200.jpg 300w, /2015/08/Fotolia_78189706_XS-150x100.jpg 150w, /2015/08/Fotolia_78189706_XS.jpg 424w",
        "mediaDetails": {
          "height": 283,
          "width": 424
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Laptop Life"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Across the world, coffee shops with free wifi and great caffeination options have become great workplace options for everyone from students to freelancers to startup founders.</p>\n<p>I&#8217;ve worked from tons upon tons of them in almost every city I&#8217;ve traveled to, and I&#8217;m constantly getting better at finding ones I like. And I know a lot more about picking them out now than I have in the past. If you&#8217;re making the jump to working from cafes, read this to save yourself a little trouble.<!--more--></p>\n<h2>Get Connected</h2>\n<p>Wifi has to be (1) free, or reasonably priced (2) reasonably fast (3) CONSISTENT. And #3 is the hardest to gauge. You can get a feel for it by asking the people around you, but you basically have to take a gamble the first time you work from a particular coffee shop. The last thing you want is to be in the middle of an important email / code push / blog post / etc, and the wifi gives out.</p>\n<p>If you&#8217;re like me, you&#8217;ll use cloud tools like <a href=\"http://evernote.com/\">Evernote</a> and <a href=\"http://dropbox.com/\">Dropbox</a> so your work is often saved almost automatically. But if you&#8217;re operating strictly online (like when updating a WordPress post, for example), and the wifi drops, you might get screwed. Save early and often.</p>\n<h2>Feel the Power</h2>\n<p>Not all cafes have outlets available, so when you scout them out be sure to do a quick walk around and look at the floor for outlets. I don&#8217;t need to tell you that without power, you&#8217;ll only have a few hours of work if you&#8217;re lucky.</p>\n<p>I also recommend investing in a portable charger &#8211; see my post, <a href=\"http://mikecavaliere.wpengine.com/10-tools-of-the-trade-for-coffee-shop-work/\">10 Tools for Getting Sh*t Done in Coffee Shops.</a></p>\n<h2>Cards on the Table</h2>\n<p>Many cafes have small, two-person-maximum tables. A few rare and awesome ones have large communal tables (gems like <a href=\"http://www.acehotel.com/\">Ace Hotel</a> and <a href=\"http://www.vineapple.com/\">Vineapple</a> in NYC). Lots of elbow room is a big help</p>\n<p>Also if you use an external mouse like I do, and you end up on a table that has a glass or otherwise shiny surface, the mouse won&#8217;t work properly. So keep an eye out for large non-reflective tables.</p>\n<h2>Down and Dirty: Bathrooms</h2>\n<p>If you&#8217;re spending a whole day at someplace, and ordering coffee, you&#8217;re gonna need the bathroom…multiple times. And not all are created equal, na&#8217;mean? Look for the clean ones.</p>\n<h2>Bring tha Noise: Ambience</h2>\n<p>I always have some <a href=\"http://www.amazon.com/Jabra-VOX-Corded-Stereo-Headphones/dp/B00BFNYD90/ref=sr_1_1?s=electronics&amp;ie=UTF8&amp;qid=1431454665&amp;sr=1-1&amp;keywords=jabra+vox\">good headphones</a> with me, so I can get stuff done with a moderately noisy place. But if I have to make a phone call or do a google hangout with someone, it&#8217;s nice not to be sitting right next to the barista while a latte is being churned out at high volume.</p>\n<p>Look for places that have a sitting area that is fairly distant from the main counter, preferably in a separate room.</p>\n<h2>People Power</h2>\n<p>The Dunkin Donuts in the city&#8217;s main train station might have free wifi, but people generally don&#8217;t go there to work or study. In that vein, not all cafes are suited to getting stuff done.</p>\n<p>Look for places where people have their laptops out, firstly since some places discourage them altogether. Pay attention to how frequently people come and go. If it tends to be a good working environment, people will stay a long time &#8211; meaning it&#8217;s easier to meet people who might watch your stuff for you. If it&#8217;s high-traffic starbucks</p>\n<h2>Burning the Midnight Oil</h2>\n<p>I&#8217;m more or less a person who likes to work in the daytime, so I never have a problem with cafes being open when I start working. But I&#8217;ve often gotten kicked out of places that close early on weekdays.</p>\n<p>I also realize that a lot of people prefer working well into the evening. If that sounds like you, make sure you check out a cafe&#8217;s hours online before hitting it up (<a href=\"http://www.yelp.com/\">Yelp</a> FTW).</p>\n<h2>Seeing the Light</h2>\n<p>Some people like using their laptop in the dark &#8211; personally, that makes me feel woozy. I need a well-lit room to work. Whatever your preference, look for places whose lighting suits you.</p>\n<h2>Feeding the Beast</h2>\n<p>A coder&#8217;s gotta eat, right? Many places that are primarily coffee establishments don&#8217;t have tons in the way of selection, so keep that in mind. If you can find one that has more than pastries and grilled cheese, you&#8217;re in luck. As a backup plan, make note of a few nearby places for quick eats, and get skilled in the art of packing your stuff up quickly.</p>\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"http://mikecavaliere.wpengine.com/how-to-pick-a-good-coffice/#respond\">Leave a reply.</a></b></p>\n"
  },
  "how-to-have-the-perfect-schedule": {
    "id": "cG9zdDozOTU=",
    "title": "How to Have The Perfect Schedule",
    "excerpt": "<p>A few years ago, I had to make some serious choices about the way I work. I&#8217;ve always enjoyed doing technology work, but since I was a young kid I&#8217;ve never felt quite “right” working in a typical 9-5 schedule. It wasn&#8217;t until far into my adult life that I found out I had a [&hellip;]</p>\n",
    "slug": "how-to-have-the-perfect-schedule",
    "date": "2015-08-07T12:13:12",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/08/Fotolia_77519308_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/08/Fotolia_77519308_XS-300x200.jpg 300w, /2015/08/Fotolia_77519308_XS-150x100.jpg 150w, /2015/08/Fotolia_77519308_XS.jpg 424w",
        "mediaDetails": {
          "height": 283,
          "width": 424
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Laptop Life"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>A few years ago, I had to make some serious choices about the way I work. I&#8217;ve always enjoyed doing technology work, but since I was a young kid I&#8217;ve never felt quite “right” working in a typical 9-5 schedule.</p>\n<p>It wasn&#8217;t until far into my adult life that I found out I had a few things going on that explained this somewhat &#8211; I found out I had a sleep disorder, ADHD and learning disabilities. Things started to make more sense.<!--more--></p>\n<h2>A Fork in the Road</h2>\n<p>Sometime thereafter, I was lead engineer at a startup, and working the typical more-than-full-time startup schedule. The company gradually improved, but my health goals didn&#8217;t. So I had to draw a line in the sand and put my health before my job in a big way.</p>\n<p>Fast forward to now. My typical work week is 20-25 hours. I sleep 8 hours a night, eat fairly well and exercise every day in some form. I hit the gym, I do yoga, and salsa dancing. I travel a fair bit. I enjoy myself on the weekends, and I don&#8217;t work late at night (since it affects my sleep). I fit in the time to do crazy things like <a href=\"http://adhdtechies.com/vipassana-meditation-and-adhd-or-how-i-felt-after-10-days-of-silence/\">10-day silent meditation retreats</a> and bizarre brain training experiments. I still manage to pay my bills absolutely fine, <strong>and my clients are happy with my work. </strong></p>\n<p>People are often surprised by how lean my schedule is, and how I&#8217;m able to do all the things I do. If you&#8217;re a developer with a little experience, I think this is very doable for a lot of you. Below is an approach to get you started.</p>\n<h2>Crafting Your Perfect Schedule</h2>\n<p>Depending on your experience level, your approach may be a bit different from mine. Each of the points below is very relevant, but you might apply them differently if you&#8217;re a more junior programmer or not a freelancer. Here&#8217;s the cheat sheet:</p>\n<ul>\n<li>Describe Your Perfect Schedule</li>\n<li>Build a &#8220;More Value in Less Time&#8221; Mindset</li>\n<li>Examine Your Current Situation</li>\n<li>Define Your Unique Offering</li>\n<li>Mitigate Responsibilities, Set Expectations</li>\n<li>Hustle &amp; Deliver</li>\n</ul>\n<h3>Describe Your Perfect Schedule</h3>\n<p>First, clearly define the schedule you want, including actual work time and the personal things you want to do on a regular basis. If you have a goal in mind, you&#8217;ve got something clear to work toward. (This is a lot like Tim Ferriss&#8217; “dream lining” concept.) Make it at least a little detailed. It doesn&#8217;t have to be exact.</p>\n<p>Write it out on paper or digitally. For me this originally may have looked something like this (I&#8217;d write the whole week out, but here&#8217;s just Monday so you get the idea):</p>\n<p><a href=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/08/Schedule.png\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-398\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/08/Schedule.png\" alt=\"Schedule\" width=\"293\" height=\"192\" /></a></p>\n<h3>Build a &#8220;More Value in Less Time&#8221; Mindset</h3>\n<p>List out (again, on paper or digitally) the 3-5 things you do (or can do) that are most valuable to your employer, or prospective clients. If you can find a way to focus on those 3-5 things, and cut out everything else, you can make a case for working part time.</p>\n<p>The hard part is getting more money per hour spent if you&#8217;re at an existing job. You&#8217;ll have to talk your employer into it. As a freelancer, you can set your rate and terms, so it&#8217;s my perception that setting a higher rate is more acceptable.</p>\n<h3>Examine Your Current Situation</h3>\n<p>Do you currently have a full-time job, or are you a freelancer? If you&#8217;re FT, consider going freelance. A BIG perk of freelancing is the ability to set your own schedule, and since you&#8217;re getting your own clients you can set part-time hours as a requirement of working with you.</p>\n<p>Another possibility is to work something out with your current job. Notice where you&#8217;re most valuable there &#8211; is it for a particular piece of code you maintain? Is it for support or troubleshooting?</p>\n<p>Whatever it is, focus on your strengths; that is, which 3-5 of your skills are MOST valuable to your boss, or prospective clients? The goal is to market yourself as being good at those things, and cut out everything else so that you&#8217;re spending far less time working. If those few things are valuable enough to your company, you can make a case to your boss for doing them part time.</p>\n<h3>Define Your Unique Offering</h3>\n<p>Write down your 3-5 biggest skillsets in a really specific way. For a full-timer, these are the things you do best at your job (that preferably no one else does). For a freelancer, these are the services you can offer to clients. Here&#8217;s an example of mine:</p>\n<ul>\n<li>Senior-level front-end development (Javascript frameworks, single-page web applications)</li>\n<li>Full-stack development (Ruby on Rails)</li>\n<li>Front-end performance optimization</li>\n<li>Front-end best practices training (1-on-1, or team-based)</li>\n</ul>\n<p>For a full-timer, this might even be a list of features you actively maintain, and know better than anyone else. Either way, this list is the things you want to tailor your schedule to work on, and eliminate everything else.</p>\n<h3>Mitigate Responsibilities, Set Expectations</h3>\n<p>Working 3 days a week means you can&#8217;t be a part of a daily standup (not every day), be available for emergencies, or work on things that are very time-sensitive. This is absolutely fine, and part of the reason many of us choose these schedules.</p>\n<p>The important part is that you set the expectation properly. Once again freelancers have it easier here: when I take on a new client, I&#8217;m very upfront that I work 3-4 days per week on projects, at a maximum of 6 hours per day. And when we schedule tasks for me to work on, I don&#8217;t take on critical, time-consuming tasks at the end of the week (or risk them being undone). It&#8217;s important that my clients know to use me for things that don&#8217;t fall into that category. I will however take on something critical on a Tuesday morning if it will help out.</p>\n<p>Also, part of the services I offer are training-related. I will take on a client, examine their Javascript codebase, and come up with lessons on how to do it better. I train their developers on best practices using their own code as an example, and have them do the implementation as homework. This is another way I can deliver a ton of value to their team, without disrupting my own schedule or holding up their team&#8217;s schedule in any way.</p>\n<h3>Hustle &amp; Deliver</h3>\n<p>Once you internalize the mantra above,  you&#8217;ll eventually find more and more ways to do it. Embrace the fact that you don&#8217;t have to work 40+ hours per week for employers or clients to benefit from your skills.</p>\n<p>Spend every minute of your working time keeping your client&#8217;s needs in mind, and they&#8217;ll be glad to pay you. And as you more clearly define your unique offerings, you&#8217;ll get better at marketing yourself based on them, and that&#8217;ll lead to more opportunities that match the schedule you want.</p>\n"
  },
  "dont-eat-the-candy": {
    "id": "cG9zdDozNjQ=",
    "title": "Don’t Eat The Candy",
    "excerpt": "<p>I had someone contact me recently who wanted a website redesigned and rebuilt. It was a portal site with lots of different features….products to sell, services to book, and so on. I got on the phone with the owner of the site to learn more. When I asked what the goal of the site was, she said [&hellip;]</p>\n",
    "slug": "dont-eat-the-candy",
    "date": "2015-06-01T09:22:30",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/06/Candy-Fotolia_71458925_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/06/Candy-Fotolia_71458925_XS-300x200.jpg 300w, /2015/06/Candy-Fotolia_71458925_XS-150x100.jpg 150w, /2015/06/Candy-Fotolia_71458925_XS.jpg 424w",
        "mediaDetails": {
          "height": 283,
          "width": 424
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>I had someone contact me recently who wanted a website redesigned and rebuilt. It was a portal site with lots of different features….products to sell, services to book, and so on.</p>\n<p>I got on the phone with the owner of the site to learn more. When I asked what the goal of the site was, she said to me, “to be the go-to site for all things related to X.” (Where X was the topic of the site.)<!--more--></p>\n<p>Anytime someone wants to build a site that “does all things related to X,” that means a lot of work, and a huge fat paycheck for a freelancer. At times like this, it’s tempting to jump on the project, throw a large price tag on it, and (if the client goes for it) start building.</p>\n<blockquote><p>&#8220;When someone offers you candy, think twice about whether you should be eating it right now. It could leave a bad taste in your mouth (and also, the mouth of the client). &#8221;</p>\n<p><cite>&#8211; Mike Cavaliere (That&#8217;s me.)</cite></p></blockquote>\n<p>After asking some questions, I found out that this prospective client was an individual businessperson (not part of a big corporation). Which means, smaller budget so she’s not looking to burn tons of money. And any site whose goal it is to “do all things related to X” is a whole lot of design and development work. Furthermore, a company who tries to do too many things too fast will often fail at most of them &#8211; and if you’re a lone entrepreneur with a small budget, that means your whole venture will die very quickly, and not get back up.</p>\n<p>Taking her money at this stage would have been catastrophic. I would have built her something that didn’t make her any money, meaning no future business for me. Or she would have balked at the price tag and went elsewhere. Maybe she would have hired someone far cheaper, who would do a shitty job &#8211; and also also waste her money trying to do everything at once.</p>\n<p>Here’s what I did instead: I asked her about what she hoped to achieve with the site, and what her core business was. It turned out that she has a few possible ways of making money, but only one or two revenue streams that are stable and reliable. I told her that those are more likely where she should be investing her money for the site &#8211; and cutting off all else for now. If we focus on those aspects and see how the site could grow revenue (and/or reduce labor) in those areas, then <i>she’ll be more likely to make money, sooner.</i> Which means that she’d be confident knowing I built something valuable for her. Which means more possible work in the future. Win for the client, win for me.</p>\n<h2>What’s best for the client (and you) long term?</h2>\n<p>The moral is that when someone comes to you and says “I want you to build/design me something,” resist the urge to take the project at face value.</p>\n<p>Dig deeper. Try to figure out what they’re trying to achieve with this site or app. It may be that they don’t even need one, and if you can help them understand that, you’ll earn their respect by saving them lots of money and stress.</p>\n<p>If you can get to what they’re REALLY trying to achieve, and help them achieve that in an efficient way, you’ll build a better relationship with them by helping them truly be successful.</p>\n"
  },
  "get-hired-again-and-again": {
    "id": "cG9zdDozNTA=",
    "title": "Get Hired Again and Again: 3 Steps",
    "excerpt": "<p>Freelance developers, full-time developers and brand-new-fresh-outta-school-newbie developers all face a similar dilemma at different times in their careers: how the hell do I get a job? If you’re freelance, you’re going to be constantly looking for new projects throughout your career. If you’re not freelance, you’ll still face this challenge once in a long while. And [&hellip;]</p>\n",
    "slug": "get-hired-again-and-again",
    "date": "2015-05-26T13:36:57",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/05/Self-Marketing-Formula.png",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/05/Self-Marketing-Formula-300x300.png 300w, /2015/05/Self-Marketing-Formula-150x150.png 150w, /2015/05/Self-Marketing-Formula-400x400.png 400w, /2015/05/Self-Marketing-Formula.png 800w",
        "mediaDetails": {
          "height": 800,
          "width": 800
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Freelance developers, full-time developers and brand-new-fresh-outta-school-newbie developers all face a similar dilemma at different times in their careers: how the hell do I get a job?</p>\n<p>If you’re freelance, you’re going to be constantly looking for new projects throughout your career. If you’re not freelance, you’ll still face this challenge once in a long while. And it’s hardest when you’ve never done it before: How the hell do you get experience if you’ve got no experience?<!--more--></p>\n<p>I&#8217;m going to outline-solid a strategy that will help you get lots of work in the long term. It&#8217;s not a magic wand, but it&#8217;s a paradigm that works.</p>\n<h2>My Immense, Complex Strategy for Getting Work</h2>\n<p>Here it is:</p>\n<ol>\n<li>Do stuff.</li>\n<li>Show it off.</li>\n<li>Repeat.</li>\n</ol>\n<p>That&#8217;s freaking it. There are details naturally, but remembering those 3 as your mantra will work wonders.</p>\n<p>In other words, build up your own experience in the form of learning and building things. Then make sure you share it with people as much as possible &#8211; friends, classmates, potential employers, and especially the internet.</p>\n<h2>Step #1: Do stuff.</h2>\n<p>Constantly keep active, even when you’re not working. This will build up knowledge and experiences which gradually add to your credibility as a professional programmer.</p>\n<p>Spend time doing things like the following:</p>\n<ul>\n<li>Learning up a new technology, framework or tool. Doing demo projects with it.</li>\n<li>Building websites / apps for fun.</li>\n<li>Contributing to open source repositories.</li>\n<li>Going to hackathons or other programming events.</li>\n<li>Paying projects (if you have them).</li>\n</ul>\n<p>You generally want to <em>create</em> things as much as possible. But even when you’re not writing code, you’re generating new experiences that are worthwhile to talk about. That’s where part 2 comes in.</p>\n<h2>Step #2: Show it off.</h2>\n<p>Talk about the things you’re doing in every medium possible. This includes things like:</p>\n<ul>\n<li>Writing on your tech blog.</li>\n<li>Adding demos or brag-worthy client names to your portfolio.</li>\n<li>Posting on social media accounts (Twitter, Facebook, Medium)</li>\n<li>Posting on other people’s blogs (in comments, guest posts).</li>\n<li>Having conversations (at programming events, job fairs).</li>\n<li>Adding to your LinkedIn profile.</li>\n<li>Adding code to your github profile.</li>\n<li>(And naturally, applying directly to jobs/gigs as well.)</li>\n</ul>\n<p>The coolest thing you’ve ever done is worthless if no one knows about it. However, the more people know about it, the more they can tell other people about it &#8211; some of which may hire you.</p>\n<p>Even if you’re just blogging about your experiences learning a new technology, or your experiences at a programming event (however frustrating it may have been), chances are someone had the same experience with you and could potentially connect with it. Put it in a blog post, share it around. At the very least, it shows you’re active and interested in what you do.</p>\n<p>I once had a tech blog that got almost no traffic, and I barely maintained it. But having it meant that anyone who looked at my resume saw the blog and believed I knew what I was talking about. At the very least, having a few posts written up add to your credibility big time.</p>\n<h2>Step #3: Repeat (&amp; Profit)</h2>\n<p>The more you do these 2 things, the more opportunities will open up randomly throughout your career.</p>\n<p>This is stuff I’ve been doing in some form throughout my career. And the truth is, eventually it becomes very little work at all. You’ll end up in a random conversation with someone in the same industry, and when they ask what you’ve been up to, you say, “I just finished doing some front-end dev work for CBS Sports.” The next thing you know they’re emailing you the contact info of someone who wants a web application built.</p>\n<h2>The bottom line</h2>\n<p>Credibility (and therefore hire-ability) isn&#8217;t a one-shot deal; it&#8217;s a practice, just like coding is. Just as you should be honing your coding craft regularly, make it a habit to demonstrate what you&#8217;re doing regularly.</p>\n<p>Even if it&#8217;s once a month, a little show and tell will go a long way in terms of getting new work into your hands.</p>\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"http://mikecavaliere.wpengine.com/get-hired-again-and-again/#respond\">Leave a reply.</a></b></p>\n"
  },
  "wtf-is-front-end-development": {
    "id": "cG9zdDozMjk=",
    "title": "WTF is Front-End Development?",
    "excerpt": "<p>I&#8217;m a full-stack developer by trade, but front-end is my specialty. I&#8217;ve seen it treated with a bit of ambiguity over the years though, so I think it&#8217;s worthwhile to clarify the term. Front-end development defined For a clear working definition of front-end development, I&#8217;ll use a variation upon Wikipedia&#8217;s definition: Front end development is [&hellip;]</p>\n",
    "slug": "wtf-is-front-end-development",
    "date": "2015-05-19T11:49:36",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/05/Question.png",
        "altText": "A white question mark enclosed in a gray shaded circle.",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/05/Question-300x300.png 300w, /2015/05/Question-150x150.png 150w, /2015/05/Question-400x400.png 400w, /2015/05/Question.png 800w",
        "mediaDetails": {
          "height": 800,
          "width": 800
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>I&#8217;m a full-stack developer by trade, but front-end is my specialty. I&#8217;ve seen it treated with a bit of ambiguity over the years though, so I think it&#8217;s worthwhile to clarify the term.<!--more--></p>\n<h2>Front-end development defined</h2>\n<p>For a clear working definition of front-end development, I&#8217;ll use a variation upon <a href=\"https://en.wikipedia.org/wiki/Front_end_development\">Wikipedia&#8217;s definition</a>:</p>\n<blockquote><p>Front end development is the development of those elements of a website that the customer sees and interacts with directly.[1] It is a combination of programming skills (knowing which program to choose) and aesthetics (understanding element arrangements on the screen, the color and font choices).</p></blockquote>\n<p>Note that <i>the ability to make visually creative choices is not a requirement.</i> A front-end dev has to comprehend and manipulate these things, but not necessarily be creative aesthetically. That falls primarily under the category of visual design…technically. Also the ability to make creative choices about animation and user interaction falls under User Experience (UX) or Interaction Design (IxD)&#8230;technically.</p>\n<h2>Creativity not required&#8230;but preferred</h2>\n<p>In the long run, you can and should attempt to at least dabble in those areas. Getting decent at all 3 will make you a front-end powerhouse, and some of the most exceptional front-end devs I&#8217;ve met are good at all 3&#8230;but people like that are pretty rare. The <i>necessary</i> requirement for front-end development is the technical part.</p>\n<p>Here are the the things that I think are required to be called a front-end developer:</p>\n<ul>\n<li><strong>Fluency in browser-specific technologies.</strong> (HTML, Javascript and CSS)</li>\n<li><strong>Knowledge of browser differences.</strong> (Mobile vs desktop, IE vs Firefox vs. Safari)</li>\n<li><strong>Ability to control web page presentation.</strong> (Layout, typography, images, colors, etc.)</li>\n<li><strong>Knowledge of certain tools including: </strong>\n<ul>\n<li>Browser debuggers (Firebug, Chrome/Safari/etc debugger tools)</li>\n<li>Preprocessors (SASS, LESS, CoffeeScript)</li>\n<li>Frameworks (Angular, React, etc)</li>\n</ul>\n</li>\n<li><strong>Stuff all developers should know:</strong>\n<ul>\n<li>Source control (git)</li>\n<li>Collaboration tools (Basecamp, Jira or others)</li>\n</ul>\n</li>\n<li><strong>Stuff for advanced developers:</strong>\n<ul>\n<li>Build &amp; dependency management tools (Grunt, Bower, RequireJS)</li>\n<li>Knowledge of frameworks</li>\n<li>Familiarity with build tools</li>\n<li>Some understanding of UX and IxD</li>\n</ul>\n</li>\n</ul>\n<p>You should also have these (but could get by without, if you must):</p>\n<ul>\n<li>A sense of aesthetics</li>\n<li>A sense of how interactions work and usability</li>\n</ul>\n<p>Front-end Development does NOT technically include:</p>\n<ul>\n<li>Visual Design</li>\n<li>User Experience design (UxD)</li>\n<li>Interaction Design (IxD)</li>\n<li>Server-side coding (aka backend development)</li>\n</ul>\n<p>Now, all that said &#8211; these days some job descriptions for front-end developers include some of the above design skills. If you&#8217;re applying for a job at a startup that has no in-house designers, chances are they&#8217;re going to expect some sort of aesthetic ability in this area. This is where it really pays to know whether you&#8217;re good at this stuff (or not) and market yourself accordingly.</p>\n<p>I for one suck at visual design, mostly. I can scrape by and alter existing designs in some small ways, if needs be. I also have an eye for good UX vs. bad UX, and can critique and alter it well. But if I tried to create a design from scratch it&#8217;d turn into crappy, distraught, abstract pop art at best. And at the end of the day, it doesn&#8217;t matter since I&#8217;m great at front-end programming, and that&#8217;s how I market myself.</p>\n<h2>Focus on what you&#8217;re good at</h2>\n<p>The moral of the story is that to be a good front-end dev, it&#8217;s good to have some aesthetic ability or at least the ability to communicate about it. If you&#8217;ve got that, market it as a strong point. But if you&#8217;re totally programming-minded, you can roll with that and still have a fantastic career.</p>\n<hr />\n<p class=\"comment-cta-box well text-center\"><i class=\"fa fa-lightbulb-o fa-3x margin-right\"></i><b>What are your thoughts on this? <a href=\"#respond\">Leave a reply.</a></b></p>\n"
  },
  "pros-and-cons-of-freelancing": {
    "id": "cG9zdDozMTQ=",
    "title": "Pros and Cons of Freelancing",
    "excerpt": "<p>I love a lot of aspects of the freelance life. It suits me well, which is why I’ve done of it for most of my 15 year career. In fact, in those 15 years I’ve only held one full-time salaried job. And now I’m back to freelancing again. So that may tell you something. But [&hellip;]</p>\n",
    "slug": "pros-and-cons-of-freelancing",
    "date": "2015-05-15T10:04:20",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/05/beach-laptop.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/05/beach-laptop-300x217.jpg 300w, /2015/05/beach-laptop-150x108.jpg 150w, /2015/05/beach-laptop.jpg 500w",
        "mediaDetails": {
          "height": 361,
          "width": 500
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Laptop Life"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>I love a lot of aspects of the freelance life. It suits me well, which is why I’ve done of it for most of my 15 year career. In fact, in those 15 years I’ve only held one full-time salaried job. And now I’m back to freelancing again. So that may tell you something.<!--more--></p>\n<p>But the freelance life is not for everyone. If you’re the type of person that absolutely NEEDS a stable paycheck every week, or gets really timid taking risks, freelancing may not be for you. At the very least, you should do some soul searching before even considering it.</p>\n<p>All that said, you’re crazy if you don’t at least consider freelancing at some point in your career &#8211; consider it right now if you haven’t already.</p>\n<h2>What’s great about freelancing</h2>\n<p>When you freelance you have a degree of flexibility in life that other people do not. You also have a constant variety of new experiences which provide opportunities that people who stay in one place rarely have.</p>\n<p>Here are some of the perks:</p>\n<ul>\n<li><b>Higher income potential.</b> Some argue that f<a href=\"http://www.businessnewsdaily.com/7959-freelance-pay-rates.html\">reelancers earn more than other people</a> on average. There are definitely arguments to the contrary as well. But since you&#8217;re setting your own rates and selling clients on them, the potential is there to charge whatever you want.</li>\n<li><b>Lifestyle flexibility.</b> I currently work 25 hours per week for other people. The rest of my time is spent exercising, traveling, socializing, writing and otherwise managing my life. In other words, really living (as opposed to just working). I also can work from anywhere.</li>\n<li><b>Variety of projects.</b> The cool thing about not &#8220;settling down” at a job is that you can date a whole lot. I tend to keep my projects limited to 1-2 months at a time. Which gives me the ability to work with different clients and different technologies. If you do this early on in your career, you can try a bunch of things before you settle at a job (or realize you don’t want to).</li>\n<li><b>Constant learning.</b> Each project requires something different, so you constantly get to learn new frameworks and technologies.</li>\n<li><b>Staying sharp.</b> Not only are you learning new things, you get faster and better at the tools you already know since you use them in so many new environments. This creates a more well-rounded and honed expertise than if you’re working on the same project all the time.</li>\n<li><b>Broader network.</b> Each team you work with introduces you to new people &#8211; each one is another LinkedIn contact or twitter follower who may get you more work in the future, teach you something valuable or save your ass when you need it.</li>\n</ul>\n<p>Oh snap. Pretty cool, eh?</p>\n<p>Is there even a downside? Well, everything has a downside.</p>\n<h2>What sucks about freelancing</h2>\n<ul>\n<li><strong>Paying taxes.</strong> This can be a royal pain. Since no taxes get taken out of your paycheck, you’ll have do store away a chunk of your earnings and pay the government at the end of the year. You get used to it, but nobody likes seeing a big-ass bill every year.</li>\n<li><strong>Getting paid.</strong> With a  regular job, you don’t often have to chase down your boss to cut you a check. With clients, you do. With the lazier ones, you have to do it repeatedly.</li>\n<li><strong>Being picky.</strong> It takes a bit of practice to get confident enough to turn down clients that don’t suit you. When you need cash you want to take on any project that comes along, but this can be a recipe for disaster.</li>\n<li><strong>Getting sued.</strong> Knock on wood, this has never happened to me. I want to say that I’ve heard of it happening to colleagues, but I can’t recall honestly. But it’s always a possibility if something bad happens on the project &#8211; and when it comes down to it, you’ve got to be responsible for everything. Make sure you get incorporated, for this reason &#8211; which leads me to the next bullet&#8230;</li>\n<li><strong>Paperwork.</strong> LLC filings, SOW contracts and invoices are things you never have to do with a normal job. Now that you’re running a business, you do.</li>\n<li><strong>Constantly proving yourself.</strong> Every time you take on a new project, you’ll have to your clients and their employees that you’re worth the money you’re charging, especially if it’s a high rate. You have to demonstrate your skills right away along with being confident and communicative as a practice so clients know they’re getting their money’s worth.</li>\n</ul>\n<h2>Is freelancing worth the trouble?</h2>\n<p>In a word, <b>hell yeah.</b> The perks far outweigh the downsides once you get into the flow of it. The constant new challenges make it impossible to get bored, and mean you’re constantly growing in knowledge and skill. And you meet new people all the time.</p>\n<p>Freelancing is honestly the shiznit, and I think most people should try it for at least 6 months in their career &#8211; whether it’s web development, copy writing, graphic design or coaching of any kind. If it’s not for you, hey, at least you tried it out. But give it a whirl, you might get addicted. 😉</p>\n<hr />\n<p>&nbsp;</p>\n<p class=\"well\" style=\"text-align: center;\"><b>Are you a freelancer, or considering going freelance? Tell me  your thoughts in the comments below. </b></p>\n"
  },
  "10-tools-of-the-trade-for-coffee-shop-work": {
    "id": "cG9zdDoyNDM=",
    "title": "10 Tools for Getting Sh*t Done in Coffee Shops",
    "excerpt": "<p>It&#8217;s really fun &#8211; and can be super productive &#8211; to work from a good &#8220;coffice&#8221; (a cafe you work from. Google it.). I&#8217;ve been a serial cafe worker for a number of years now, so I&#8217;ve learned all the ins and outs of it. There are a few things I take on the road with me all [&hellip;]</p>\n",
    "slug": "10-tools-of-the-trade-for-coffee-shop-work",
    "date": "2015-05-12T15:36:14",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/05/Office-workspace-illustration.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/05/Office-workspace-illustration-300x300.jpg 300w, /2015/05/Office-workspace-illustration-150x150.jpg 150w, /2015/05/Office-workspace-illustration.jpg 346w",
        "mediaDetails": {
          "height": 346,
          "width": 346
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Laptop Life"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>It&#8217;s really fun &#8211; and can be super productive &#8211; to work from a good &#8220;coffice&#8221; (a cafe you work from. Google it.). I&#8217;ve been a serial cafe worker for a number of years now, so I&#8217;ve learned all the ins and outs of it. There are a few things I take on the road with me all the time that have made my cafe work experience better. <!--more--></p>\n<p><b>TL;DR: Scroll to the summary at the bottom for a cheat sheet.</b></p>\n<p>Here they are: 5 things worth buying, and 5 apps I use regularly.</p>\n<h2>Things worth buying</h2>\n<h3 id=\"backpack\">A good backpack</h3>\n<p>If you carry a laptop regularly, hopefully you have the good sense not to toss it in a crappy carrying case. Take it a step further: spend some money on a great bag for it.</p>\n<div class=\"thumbnail pull-right\">\n<p><a href=\"http://www.amazon.com/Victorinox-Luggage-Altmont-Deluxe-Backpack/dp/B00B3SM7NG\"><img loading=\"lazy\" class=\"alignnone wp-image-272 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/Victorinox-Luggage-Altmont-3.0-Deluxe-Laptop-Backpack-94x150.jpg\" alt=\"\" width=\"94\" height=\"150\" srcset=\"/2015/05/Victorinox-Luggage-Altmont-3.0-Deluxe-Laptop-Backpack-94x150.jpg 94w, /2015/05/Victorinox-Luggage-Altmont-3.0-Deluxe-Laptop-Backpack-188x300.jpg 188w, /2015/05/Victorinox-Luggage-Altmont-3.0-Deluxe-Laptop-Backpack.jpg 230w\" sizes=\"(max-width: 94px) 100vw, 94px\" /></a></p>\n<div class=\"caption text-center\"><b>My kickass backpack.</b><br />\nOnly thing it ain&#8217;t is bulletproof.</div>\n</div>\n<p>Why? If you’re like me, your laptop is like your baby. If you’re a MacBook owner, it’s a $1000-$2000 investment (or more, if you include the costs of software, and your data which is invaluable). So spending $100 or so to protect it is nothing.</p>\n<p>I chose a backpack instead of the over-the-shoulder bag since I use it for everything: I carry my gym clothes in it, power charger and so on. I don’t like my neck and back hurting.</p>\n<p>I also picked one that is <strong>water resistant.</strong> This is vital &#8211; you still can’t drop the thing in a pool, but if it rains, I don’t want a single drop getting into my keyboard or ports.</p>\n<p>What to look for in a laptop backpack:</p>\n<ul>\n<li><strong>Water resistant.</strong> ESSENTIAL. Protect your shit.</li>\n<li><strong>Enough space.</strong> I carry my workout clothes and other stuff in it.</li>\n<li><strong>Rugged &amp; comfortable.</strong> Keep your back happy.</li>\n<li><strong>Versatile.</strong> For $100+, I’m gonna use mine when I go hiking too.</li>\n<li><strong>Pockets.</strong> Especially if you carry a water bottle.</li>\n</ul>\n<h3 id=\"portable-power-charger\">Portable power charger</h3>\n<p>A lot of places with free wifi <b>do not have power outlets</b> available! Which means you’re limited to a couple hours of work, and that can kill a day. In New York City, most of the Starbucks locations even covered their outlets up to save money.</p>\n<div class=\"thumbnail pull-right\">\n<p><a href=\"http://www.amazon.com/ChugPlug-External-Battery-Portable-Adapters/dp/B00IIZOYFG/ref=sr_1_cc_1?s=aps&amp;ie=UTF8&amp;qid=1431454590&amp;sr=1-1-catcorr&amp;keywords=lenmar+chugplug\"><img loading=\"lazy\" class=\"alignnone wp-image-280 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/lenmar-chugplug-150x150.jpg\" alt=\"lenmar-chugplug\" width=\"150\" height=\"150\" srcset=\"/2015/05/lenmar-chugplug-150x150.jpg 150w, /2015/05/lenmar-chugplug-300x300.jpg 300w, /2015/05/lenmar-chugplug-400x400.jpg 400w, /2015/05/lenmar-chugplug.jpg 1000w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></a></p>\n<div class=\"caption text-center\"><strong>Portable power charger</strong></div>\n</div>\n<p>Having a portable charger opens up a lot of other cafes for you to work from for extended periods of time. ALSO &#8211; if the weather is great, and you can find outdoor wifi,  you can work with the sun at your back which is freaking awesome. I’ve gotten stuff done on beaches, in parks, and hiking trails at times.</p>\n<p>The one I&#8217;ve got is the Lenmar Chugplug. It adds a little weight, but worth it for the prospect of outdoor work or more cafe options. I also leave it at home when I know I&#8217;ll be working from somewhere with an outlet.</p>\n<h3 id=\"good-headphones\">Good headphones</h3>\n<p>I know everyone has the cheap earbuds that come with their mobile phone, but they kinda suck. In my experience they break easily too.</p>\n<p>A solid pair of quality earbuds, or even better &#8211; noise canceling over-ear headphones, can give you a serious productivity boost. This is especially true if you end up in a noisy cafe (it happens often), or ever have trouble concentrating. Take it from a guy with ADHD and a learning disability, these are a sound long-term investment for GSD &#8211; getting shit done.</p>\n<p>I’ve used the below headphones and recommend them.</p>\n<div class=\"row\">\n<div class=\"col-xs-12 col-s-12 col-md-6 col-lg-6\">\n<div class=\"thumbnail\">\n<p><a href=\"http://www.amazon.com/Sony-MDRNC7-Noise-Canceling-headphones/dp/B001EYU3L2/ref=sr_1_2?s=electronics&amp;ie=UTF8&amp;qid=1431454641&amp;sr=1-2&amp;keywords=sony+mdr+noise+cancelling\"><img loading=\"lazy\" class=\"alignnone wp-image-269 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/Sony-MDRNC7BLK-Noise-Canceling-On-Ear-headphones-Black-150x150.jpg\" alt=\"Sony MDRNC7:BLK Noise Canceling On-Ear headphones (Black)\" width=\"150\" height=\"150\" /></a></p>\n<div class=\"caption text-center\"><strong>Sony MDR-Series<br />\nNoise Cancelling Headphones</strong></div>\n</div>\n</div>\n<div class=\"col-xs-12 col-s-12 col-md-6 col-lg-6\">\n<div class=\"thumbnail\">\n<p><a href=\"http://www.amazon.com/Jabra-VOX-Corded-Stereo-Headphones/dp/B00BFNYD90/ref=sr_1_1?s=electronics&amp;ie=UTF8&amp;qid=1431454665&amp;sr=1-1&amp;keywords=jabra+vox\"><img loading=\"lazy\" class=\"alignnone wp-image-271 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/Jabra-VOX-Corded-Stereo-Headphones--150x150.jpg\" alt=\"Jabra VOX Corded Stereo Headphones\" width=\"150\" height=\"150\" srcset=\"/2015/05/Jabra-VOX-Corded-Stereo-Headphones--150x150.jpg 150w, /2015/05/Jabra-VOX-Corded-Stereo-Headphones--400x400.jpg 400w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></a></p>\n<div class=\"caption text-center\"><strong><strong>Jabra VOX Earbuds</strong></strong></div>\n</div>\n</div>\n</div>\n<h3 id=\"water-bottle\">Water bottle</h3>\n<div class=\"thumbnail pull-right\">\n<p><a href=\"http://www.amazon.com/Keurig-Stainless-Steel-Travel-Mug/dp/B0097B1110/ref=sr_1_cc_1?s=aps&amp;ie=UTF8&amp;qid=1431454711&amp;sr=1-1-catcorr&amp;keywords=keurig+contigo+mug\"><img loading=\"lazy\" class=\"alignnone wp-image-270 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/Keurig-Stainless-Steel-Travel-Mug-150x150.jpg\" alt=\"Keurig Stainless Steel Travel Mug\" width=\"150\" height=\"150\" srcset=\"/2015/05/Keurig-Stainless-Steel-Travel-Mug-150x150.jpg 150w, /2015/05/Keurig-Stainless-Steel-Travel-Mug-300x300.jpg 300w, /2015/05/Keurig-Stainless-Steel-Travel-Mug-1024x1024.jpg 1024w, /2015/05/Keurig-Stainless-Steel-Travel-Mug-400x400.jpg 400w, /2015/05/Keurig-Stainless-Steel-Travel-Mug.jpg 1280w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></a></p>\n<div class=\"caption\"><strong>Hot / Cold Travel Mug</strong></div>\n</div>\n<p>Staying hydrated is important, especially if you drink a fair amount of coffee. If you&#8217;re working outdoors, you’ll want to have it with you before you sit. Buying bottle water all the time adds up, and isn’t eco-friendly. Plus, a good bottle will keep it cold longer, or handle coffee as well.</p>\n<p>This is the one I have right now. It’s great for water or coffee, and keeps the temperature steady for 8 hours without a problem. Doesn&#8217;t hold a ton though, so I do have to refill it often. Luckily many cafes are cool with giving out water freely as long as you buy an occasional coffee or snack.<b> </b></p>\n<h3 id=\"external-mouse\">External Mouse</h3>\n<div class=\"thumbnail pull-right\">\n<p><a href=\"http://www.amazon.com/Wireless-Mouse-Three-Buttons-Silver/dp/B00U04K9O8/ref=sr_1_1?s=home-garden&amp;ie=UTF8&amp;qid=1431454748&amp;sr=1-1&amp;keywords=logitech+m510\"><img loading=\"lazy\" class=\"alignnone wp-image-282 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/Logitech-M510-Wireless-USB-Mouse-150x114.jpg\" alt=\"Logitech M510 Wireless USB Mouse\" width=\"150\" height=\"114\" srcset=\"/2015/05/Logitech-M510-Wireless-USB-Mouse-150x114.jpg 150w, /2015/05/Logitech-M510-Wireless-USB-Mouse-300x229.jpg 300w, /2015/05/Logitech-M510-Wireless-USB-Mouse.jpg 450w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></a></p>\n<div class=\"caption\"><strong>Logitech M510 Mouse</strong></div>\n</div>\n<p>Maybe I’m old school, but trackpads feel pretty slow to me. They also don’t feel great on my wrist after a while. I keep one of these guys with me whenever I’ll be sitting at a cafe with a table (as opposed to actually having the laptop on my lap, which I rarely do).</p>\n<p>It’s good to avoid glass tables and certain other surfaces though &#8211; otherwise the laser won’t work well, and you’ll have to use the trackpad as a backup.</p>\n<p>I also prefer a USB mouse to a bluetooth one. I&#8217;ve often run into connectivity headaches with the bluetooth ones for some reason, but the USB ones seem to stay connected no matter what I do.</p>\n<h2>Must have apps for coffee shop work</h2>\n<p>Generally speaking, there are 2 categories of app you need specifically for coffice work.</p>\n<p>First, anything that keeps your important data out in the cloud automatically. This ensures that you don’t lose anything if the wifi hiccups. Or worse &#8211; if your laptop gets damaged, stolen or whatever. I’ve never had either happen to me (knock on wood), but there’s always a small possibility so you never know.</p>\n<p>The other category is security. When working on a public wifi network, your information could be viewed by anyone. So you’ll want to encrypt your internet use (especially if you use your credit card anywhere), and use secure passwords.</p>\n<h3>HTTPS Everywhere</h3>\n<p>This is a free browser extension that will encrypt your use of many websites that are by default unencrypted. You can install it and forget it, and it’ll make your browsing a lot more secure. Get it <a href=\"https://www.eff.org/https-everywhere\">here</a>.<br />\n<a href=\"https://www.eff.org/HTTPS-EVERYWHERE\"><img loading=\"lazy\" class=\" size-medium wp-image-256 aligncenter\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/https-everywhere-4-300x61.jpg\" alt=\"https-everywhere-4\" width=\"300\" height=\"61\" srcset=\"/2015/05/https-everywhere-4-300x61.jpg 300w, /2015/05/https-everywhere-4.jpg 650w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></a></p>\n<h3>VPN Client</h3>\n<p>I use TorGuard which is as easy as pie to set up. There are a bunch of other options, just pick one and run it whenever you work from a public place &#8211; ESPECIALLY when working with your financial info (bank, online purchases, etc) or other private info.<br />\n<a href=\"https://torguard.net/\"><img loading=\"lazy\" class=\" size-full wp-image-252 aligncenter\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/torguard-logo.png\" alt=\"torguard-logo\" width=\"250\" height=\"75\" /></a></p>\n<h3>Password Manager</h3>\n<p>LastPass is my app of choice, but there are a bunch of others out there like 1Password. These work across devices as well so you can generate hard-to-crack passwords, and let the app remember them for you.<br />\n<a href=\"https://lastpass.com/\"><img loading=\"lazy\" class=\" size-full wp-image-253 aligncenter\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/lastpass-logo.png\" alt=\"lastpass-logo\" width=\"261\" height=\"43\" /></a></p>\n<h3>Keeping your data in the cloud</h3>\n<p>Dropbox and Evernote are the big ones. I don’t write a single thought down that doesn’t go into Evernote &#8211; not so much as a grocery list. It backs up so fast that I never lose anything, and if needs be I can work offline. And I keep most of my important files in dropbox by default so that they’re automatically backed up as well.</p>\n<div class=\"well\">\n<div class=\"row\">\n<div class=\"col-xs-12 col-s-12 col-md-6 col-lg-6 text-center\"><a href=\"https://www.dropbox.com/\"><img loading=\"lazy\" class=\"alignnone wp-image-254 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/dropbox-logo-150x41.png\" alt=\"\" width=\"150\" height=\"41\" srcset=\"/2015/05/dropbox-logo-150x41.png 150w, /2015/05/dropbox-logo-300x83.png 300w, /2015/05/dropbox-logo-400x112.png 400w, /2015/05/dropbox-logo.png 406w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></a></div>\n<div class=\"col-xs-12 col-s-12 col-md-6 col-lg-6 text-center\"><a href=\"https://evernote.com/\"><img loading=\"lazy\" class=\"alignnone wp-image-255 size-thumbnail\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/05/evernote_logo_4c-150x37.png\" alt=\"evernote_logo_4c\" width=\"150\" height=\"37\" srcset=\"/2015/05/evernote_logo_4c-150x37.png 150w, /2015/05/evernote_logo_4c-300x74.png 300w, /2015/05/evernote_logo_4c-1024x254.png 1024w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></a></div>\n</div>\n</div>\n<p>I also make use of web-based apps as much as possible &#8211; Google Docs, Gmail, Github, etc. If I’m coding anything, it’s in source control, and I push it often.</p>\n<h2>Summary: all the cafe work tools</h2>\n<p>To recap, here’s the list of stuff I recommend you buy to make the most of coffee shop work. Also here’s some other stuff to bring with you daily as a reminder.</p>\n<div class=\"row\">\n<div class=\"col-xs-12 col-s-12 col-md-6 col-lg-6\">\n<h3>Things worth buying</h3>\n<ul>\n<li>A good backpack</li>\n<li>Portable power charger</li>\n<li>Good headphones</li>\n<li>Water bottle</li>\n<li>External mouse</li>\n</ul>\n</div>\n<div class=\"col-xs-12 col-s-12 col-md-6 col-lg-6\">\n<h3>Apps worth getting</h3>\n<ul>\n<li>Evernote</li>\n<li>Dropbox</li>\n<li>HTTPS Everywhere</li>\n<li>A VPN Client (TorGuard for me)</li>\n<li>A Password Manager (LastPass for me)</li>\n</ul>\n</div>\n</div>\n<p class=\"well\" style=\"text-align: center;\"><strong>What gadgets / apps do you bring when you work from cafes?<br />\nReply in the comments below.</strong></p>\n<p><!--more--></p>\n<div></div>\n"
  },
  "the-importance-of-saying-no": {
    "id": "cG9zdDoyMzk=",
    "title": "The Importance of Saying NO",
    "excerpt": "<p>Having a can-do attitude is generally a good thing. However, learning to respectfully decline requests or projects is vital for your career in the long run. This is especially true for freelancers, but relevant for everyone. More productive is always better, naturally. But realistically, no one person can do everything. Taking on too much can break [&hellip;]</p>\n",
    "slug": "the-importance-of-saying-no",
    "date": "2015-05-02T14:00:30",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/05/saying-no.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/05/saying-no-300x212.jpg 300w, /2015/05/saying-no-150x106.jpg 150w, /2015/05/saying-no.jpg 412w",
        "mediaDetails": {
          "height": 291,
          "width": 412
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>Having a can-do attitude is generally a good thing. However, learning to respectfully decline requests or projects is vital for your career in the long run. This is especially true for freelancers, but relevant for everyone.<!--more--></p>\n<p>More productive is always better, naturally. But realistically, no one person can do everything. Taking on too much can break an individual, a team, or a whole company. It can also make you settle for the wrong kind of work and waste time and energy.</p>\n<p>When you’re new to development, it’s easy to fall into the trap of taking the first project that comes along, or doing whatever is asked of you. Sometimes you have to; if you have no experience, you’ve got to do <i>something</i> to get some experience.</p>\n<p>Be very careful not to make this into a reflex that you do without thinking.</p>\n<h2><b>The dangers of saying ‘yes’ too much</b></h2>\n<p>When you say yes to every project that comes along, you’re bound to fall into one of these traps eventually:</p>\n<ul>\n<li>Burning out from working too much</li>\n<li>Getting paid too little</li>\n<li>Working on something that doesn’t help your career in any way</li>\n<li>Being abused/taken advantage of (not physically…but hey, you never know.)</li>\n<li>Making big commitments too soon (it’s good to date around a bit).</li>\n<li>Disliking what you do &#8211; for the wrong reasons.</li>\n</ul>\n<p>Furthermore there are some clients or bosses who will <i>keep asking for things until you do say no</i>. Some are abusive, sure &#8211; but some are just not entirely attuned to your limits. They might presume that if you’re saying yes to everything that you can handle whatever they throw at you. Which is a good thing, unless they’re really giving you too much &#8211; in which case you’ve gotta draw the line somewhere.</p>\n<h2>Everyone’s a little different</h2>\n<p>You may be thinking, “I can do all of this!” If you’re on a hot streak, taking everything that comes your way with success, good for you &#8211; enjoy the rush. But i ask you, what percentage of those projects are actually things you can show off? At some point, “taking on everything” means some stuff will be less marketable than others.</p>\n<p>Similar to “measure twice, cut once” or the Pareto Principle (aka, the 80/20 rule) &#8211; the more choosy you are, the more good things will come from your efforts (whether you’re taking on a little or a lot).</p>\n<h2>How to choose projects</h2>\n<p>I use a simple decision making process to pick which projects I take on. I didn’t invent this, lots of people use something similar. Here’s my version of it though. \\</p>\n<p>When any project or job comes along, it should satisfy at least 2 of these criteria (preferably 3-4):</p>\n<ul>\n<li>You’ll learn valuable knowledge.</li>\n<li>You’ll have something valuable to show on your portfolio/resume/brag about.</li>\n<li>You’ll get paid a good amount.</li>\n<li>You’ll meet some valuable contacts.</li>\n</ul>\n<p>That way, even in the less-than-perfect projects, you’re still benefitting a good amount.</p>\n<h2>Initial Sacrifices: Sucking It Up</h2>\n<p>If you’ve got no experience, you may have to take one or two projects that suck to build up your resume. Make sure they’re short commitments.</p>\n<p>And get <i>at least one</i> of the things above: namely, either valuable knowledge or something to show off. These two are the things that will give you better credibility, hence helping you build the power to be more picky.</p>\n<h2>Story Time: My Career Shift</h2>\n<p><strong>TL;DR: read “The Bottom Line” below. </strong></p>\n<p>At one point in my career I was in the “yes” mode &#8211; as soon as one project was ending, I’d take the next one that came along without being too choosy. It didn’t even matter whether it was an HTML/CSS project, PHP, Cold Fusion (shoot me), or some other madness. It didn’t matter who it was for. I don’t think I was that picky about the pay either.</p>\n<p>This lack of specialization left me as a jack of all trades who was making a lot less than he could. I decided to focus on front-end for a while. Specifically, I got good at taking PSD designs and making them look pixel-perfect in all browsers (including Internet Explorer 6, which was a royal pain at the time).</p>\n<p>I went to tech recruiters at that point. The recruiters started getting me work. And as I got more work, I started getting pickier. I said no to anything that wasn’t front-end. I jumped on anything with a big name attached, and I put it on my resume immediately after the project. I turned down anything that wasn’t either a recognizable name or didn’t fit a couple of my criteria above.</p>\n<p>Soon I had a resume full of names like Fedex, Frito-Lay, Hampton Hotels. I put them on my personal website at some point. Eventually I was getting job offers from recruiters, random clients who came across my website, and other people I had worked with or met in the past. Since recruiters take a cut of your hourly pay, I found out I could make a lot more by getting the work directly. So eventually I didn’t need to go through recruiters at all.</p>\n<h2>The Bottom Line</h2>\n<p>In short: try to know your worth, so you can be picky. Specialize in something that is both in-demand, and others aren&#8217;t great at. Say no to things that suck. If you’re new to the game, make sacrifices (by taking not-so-great projects) if you have to, but GET SOMETHING for it &#8211;  something you can show off.</p>\n"
  },
  "why-not-to-learn-everything": {
    "id": "cG9zdDoxNDg=",
    "title": "Why NOT to Try to Learn Everything",
    "excerpt": "<p>There is SO MUCH free information on every technology in existence. Pop a few keywords into google and you’ll find blogs and tutorials. Check github and you’ll find a ton of plugins and sample applications. The availability of information is virtually limitless. Since there&#8217;s so much information, there&#8217;s a temptation to try and do it [&hellip;]</p>\n",
    "slug": "why-not-to-learn-everything",
    "date": "2015-04-12T17:35:49",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/04/Find-Your-Niche-Fotolia_93102570_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/04/Find-Your-Niche-Fotolia_93102570_XS-300x200.jpg 300w, /2015/04/Find-Your-Niche-Fotolia_93102570_XS-150x100.jpg 150w, /2015/04/Find-Your-Niche-Fotolia_93102570_XS.jpg 424w",
        "mediaDetails": {
          "height": 283,
          "width": 424
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Developer Training"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>There is SO MUCH free information on every technology in existence. Pop a few keywords into google and you’ll find blogs and tutorials. Check github and you’ll find a ton of plugins and sample applications. The availability of information is virtually limitless.</p>\n<p>Since there&#8217;s so much information, there&#8217;s a temptation to try and do it all. Or jump on every cool new technology that comes along. Resist that urge. <!--more--></p>\n<h2>You can&#8217;t be good at everything. Deal with it.</h2>\n<p>There is however <strong>a finite limit</strong> on your time to learn things, and your ability to apply them effectively. You usually can’t improve fast by trying to learn 10 things at once. <em>A jack of all trades is a master of none.</em></p>\n<p>Picking a focus will help you get good faster. That’s one reason not to attempt (unrealistically) to be good at everything at once. The other reason is that your career can benefit a LOT from specialization.</p>\n<h2>It pays to specialize.</h2>\n<p><a href=\"http://pitchmaps.com/sell-more-by-offering-less/\">Ben Reed</a> gives a bunch of other reasons why it&#8217;s great to specialize:</p>\n<blockquote class=\"well\"><p><strong>Six things happen when you become known for one thing.</strong><br />\nWhen you build your sales message around one product or service or vertical or problem that you’re solving, you’ll start to see these six things happening:</p>\n<ul>\n<li><strong>You become much more referable.</strong> People start to automatically associate you with that one specialty area. When it comes up in conversation, so do you.</li>\n<li><strong>You have an easier time telling your story.</strong> You’re no longer trying to remember 52 different messages for 87 different audiences.</li>\n<li><strong>You become an automatic authority.</strong> As a specialist, you become an expert on your subject (in perception, as well as reality) simply because it’s all you do.</li>\n<li><strong>Your sales process becomes more efficient.</strong> You’re no longer looking to sell everything to everyone, but simply looking for prospects that have that one specific need.</li>\n<li><strong>You shrink the competitive landscape.</strong> The narrower your message, the fewer your competitors.</li>\n<li><strong>You expand your geographic reach.</strong> If someone needs brain surgery, they’ll go just about anywhere to get to the right specialist. No one travels to see a general practitioner.</li>\n</ul>\n</blockquote>\n<h2>My specialization story: front-end development.</h2>\n<p><strong>TL;DR: scroll to the moral in the next section. </strong></p>\n<p>Here’s a story. There was one point in my career where I had done a lot of work in both front-end and back-end development. I did plenty of html/css/js stuff, and plenty of database-driven PHP websites. I had the mentality that if a project sounded mildly interesting and it was paying, I’d take it.</p>\n<p>Then I met with a friend who was specializing in front-end, which she preferred because it was more visual, and therefore less boring (something that I instantly could agree with at the time). She explained how ad firms were paying great rates for front-end work. I thought about my skill set at that point, and realized that front-end was definitely what I was best at, and decided to specialize.</p>\n<p>I took a few steps:</p>\n<ul>\n<li>Tailoring my resume to showcase my front-end work</li>\n<li>Requesting front-end work specifically from recruiters and clients</li>\n<li>Saying no to other kinds of work</li>\n<li>Seeking out one large-named client through an agency, then another. (Having a few big names on your resume REALLY makes you stand out to prospective employers, and helps justify charging higher rates. )</li>\n</ul>\n<p>Once I started marketing myself specifically as a “front end developer” rather than just a generic developer, a few things happened:</p>\n<ul>\n<li>More work started coming my way.</li>\n<li>The rate I was charging went up by about 60%.</li>\n<li>I got even better at something I was already good at. This made my skills stand out against other candidates and kept me in high demand.</li>\n</ul>\n<p>I’ll also add that it pays to be good at things that few people are good at. Way back when web browsers were really different, and Internet Explorer sucked a ton more than it does now, being able to do pixel-perfect cross-browser CSS was a big deal. Ad firms would do websites for big clients like FedEx and Bacardi, and they needed to look good in Firefox, IE6 (eek) and whatever else was popular at the time. And IE6 was the worst of the worst….El Diabolo. El chupacabra. No bueno.</p>\n<p>After a fair bit of experience, I learned many of IE6’s quirks and how to get around them. I had bookmarked all the (slightly harder to find back then) websites that listed workarounds for those bugs (like the notorious peek-a-boo bug &#8211; it still gives me nightmares). I carried around a USB drive with a bunch of front-end dev ebooks on it for reference (remember &#8211; no Dropbox back then!).</p>\n<p><strong>I knew this was something ad firms needed badly, and I knew I was good at it.</strong> I took a gig at one major ad firm who has been around since the Mad Men days. After they saw what I could do, they told me how refreshing it was that I wasn’t lying on my resume about knowing cross-browser development. They said they had 6 (!!!) developers come in before me that claimed to know HTML and CSS, yet couldn’t make a lot of these designs look good in all the browsers.</p>\n<h2>Moral: get good at one thing at a time.</h2>\n<p>The bottom line: pick a technology you like and get really good at it. It’s helpful if it’s (1) something in demand and (2) something not a lot of others are good at. Once you can get steadily paid for that one skill, then start adding others.</p>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n"
  },
  "javascript-linting-what-developers-need-to-know": {
    "id": "cG9zdDoxNjM=",
    "title": "Javascript Linting: What Developers Need to Know",
    "excerpt": "<p>After working as a developer for quite some time (decades), I’ve recently started to train other developers and teams in ways to improve their front-end development skillsets and processes. Linting is one of the least talked about, but most essential tools in a front-end developer’s toolbox. So when people ask “What’s the easiest thing we can do [&hellip;]</p>\n",
    "slug": "javascript-linting-what-developers-need-to-know",
    "date": "2015-03-26T21:19:16",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/03/Lint-Fotolia_83071208_XS.jpg",
        "altText": "Dust bunny on a white background.",
        "description": "<p>Dust bunny on a white background.</p>\n",
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/03/Lint-Fotolia_83071208_XS-300x199.jpg 300w, /2015/03/Lint-Fotolia_83071208_XS-150x99.jpg 150w, /2015/03/Lint-Fotolia_83071208_XS.jpg 426w",
        "mediaDetails": {
          "height": 282,
          "width": 426
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Developer Training"
          }
        },
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p style=\"text-align: right;\">After working as a developer for quite some time (decades), I’ve recently started to train other developers and teams in ways to improve their front-end development skillsets and processes. <em><strong>Linting</strong></em> is one of the least talked about, but most essential tools in a front-end developer’s toolbox. So when people ask “What’s the easiest thing we can do to improve our code?” I say, “Lint your stinkin&#8217; JavaScript.&#8221;<!--more--></p>\n<p>Sometimes I instead say, “Yo. You need to lint yourJavaScript.”</p>\n<p>Or, &#8220;Seriously, lint yourJavaScript. For realz, brah.&#8221;</p>\n<h2><b>WTF is Javascript linting?</b></h2>\n<p>“Linting&#8221; means running a very basic code quality tool which will look at yourJavaScript, and tell you where and how to clean it up.</p>\n<p>In other words, it’s something that can AUTOMATICALLY find the dumb mistakes we all make, so you can fix them without thinking. It’ll make your code break less and prevent some very confusing problems.</p>\n<h2><b>Why linting is important</b></h2>\n<p>Top 5 reasons you should be linting your JavaScript:</p>\n<ul>\n<li>It prevents certain types of bugs, including a few catastrophic ones.</li>\n<li>It saves you time.</li>\n<li>It makes your code better.</li>\n<li>It’s easy.</li>\n<li>It’ll get you laid more.</li>\n</ul>\n<p>(Ok it won’t really get you laid, but then again neither will web development &#8211; usually. So I&#8217;ll assume you’re in this for business reasons. Moving on.)</p>\n<p>It definitely will improve your skills, by guiding you toward better coding habits while you work and practice (this is vital: see <a href=\"http://mikecavaliere.wpengine.com/keep-your-swords-sharp/\">Keep Your Swords Sharp</a>).</p>\n<p>Oh and it can make your code cleaner, which will make you look cooler to other developers. So if you’ve got your sights set on that QA engineer with the thick glasses, this may mean there’s hope for you yet.</p>\n<h2><b>Problems linting can prevent</b></h2>\n<p>Linting tools issue warnings about certain types of code smells that can lead to common problems. Some are quite major.</p>\n<h3><b>Problem #1: Works in development, breaks in production</b></h3>\n<p>Most modern web stacks support minification, but the minifiers won’t tell you when you’re missing semicolons, and neither will your browser. But a missing semicolon can break minified javascript.</p>\n<p>Why this sucks: your code will work nice and happy in development. Then you’ll deploy to production &#8211; shit breaks, and you don’t know why. Customers complain. Your boss yells at you. You swear the code works! Chaos ensues.</p>\n<h3><b>Problem #2: Scope Conflicts</b></h3>\n<p>Ever create a variable called “id” or “name” or “value?” Yeah, so has every other developer in history, including people that will work on the same codebase as you. And if someone forgets to declare all their variables with var, they can overwrite each other unexpectedly.</p>\n<p>If you have variables with the same name in multiple places, and someone forgets to use var even once, you bet your sweet ass your variable can get overwritten with a value you didn&#8217;t expect.</p>\n<p>And it will happen. They will forget. You will forget. Chaos ensues…you get the picture.</p>\n<h3><b>Problem #3..N: Many More.</b></h3>\n<p>Linting your JS can prevent potential XSS security holes, readability problems, etc.</p>\n<h2><b>JavaScript Linting Tools</b></h2>\n<p>Today’s linting tools are <a href=\"http://jshint.com/\">JSHint</a> (new, fairly common, and the one I recommend), <a href=\"http://eslint.org/\">ESLint</a> (newer, powerful)  and <a href=\"http://www.jslint.com/\">JSLint</a> (the original JS linting tool).</p>\n<p>I recommend JSHint because:</p>\n<ul>\n<li>It’s more user-friendly and configurable than JSLint.</li>\n<li>It’s pretty common and has a good amount of community support.</li>\n<li>I haven&#8217;t used ESLint enough to recommend it yet.</li>\n</ul>\n<p>But use whichever as long as you get&#8217;er done.</p>\n<h2><b>How to use JavaScript linting tools</b></h2>\n<p>There are different means by which to use linting tools to improve your code quality. Let’s start out with the training wheels.</p>\n<h3>Linting manually, in the browser</h3>\n<p>Paste some code you’re really proud of into www.jshint.com with a big, cheery smile on your face. Then wipe that silly smile off your face as jshint tells you how much your code sucks. Brutal.</p>\n<p>This is the quickest way to get started with linting, but there are more ideal means.</p>\n<h3>Linting from your code editor</h3>\n<p>Sublime text has plugins for all of the linters above, and I&#8217;d imagine most IDEs today do as well. Grab one and have it check your code automatically, or with a keystroke.</p>\n<p>This is particularly great since it&#8217;s unobtrusive; you&#8217;re already in your editor, might as well clean your code up while you write it.</p>\n<h3>Linting from the command line</h3>\n<p>If you’re using a command line tool like Grunt or Gulp, you’re ahead of the curve. You may have a linter installed already, and if not there is a JSHint plugin for each of those.</p>\n<p>If you’re even slicker, you can install something like grunt-contrib-watch to run the linter every time you change your JS, and lint as you code.</p>\n<h3>Linting as part of a build process</h3>\n<p>This is the best way to ensure that these types of problems never see the light of day. When you or another developer leaves some lint in your code and goes to deploy, everything grinds to a halt until you fix it.</p>\n<h2>What else you need to know</h2>\n<p>The linting tools can be sensitive, to the point of being anal &#8211; like your third grade english teacher who shamed you every time you wrote &#8220;its&#8221; instead of &#8220;it&#8217;s.&#8221;</p>\n<p>JSHint is better than JSLint in this regard, which is why I prefer it. But it can also give you a lot to read when you first use it. Luckily, it&#8217;s also very configurable.</p>\n<p>I recommend turning off most of your linter&#8217;s settings when you first start using it, so that you have a minimal set of errors to start with. Take the ones it spits out, learn what they mean, then fix them. Then re-enable another setting and repeat. This way your code gets better gradually, without you getting overwhelmed.</p>\n<h2>The Bottom Line</h2>\n<div>Linting is a vital part of your workflow, and will help you improve your skills. Start linting your JavaScript by some means immediately, if you&#8217;re not already.  It&#8217;ll make you a better developer with less stress and more time (presumably for chasing after QA girls or guys).</div>\n<div></div>\n<div></div>\n<h2></h2>\n<div></div>\n<div></div>\n"
  },
  "dont-get-attached-programming-languages": {
    "id": "cG9zdDoxNDU=",
    "title": "Don’t Get Attached to Programming Languages",
    "excerpt": "<p>On programming languages &amp; frameworks It&#8217;s ok to love the framework or language you use the most. If Python is your shit, then use it like crazy. You really should get great with one thing before scattering your attention too much with others anyway. Being too attached to one language can lead to being closed to alternatives. If [&hellip;]</p>\n",
    "slug": "dont-get-attached-programming-languages",
    "date": "2015-02-26T10:21:21",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/02/Chain-Fotolia_87821369_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/02/Chain-Fotolia_87821369_XS-300x300.jpg 300w, /2015/02/Chain-Fotolia_87821369_XS-150x150.jpg 150w, /2015/02/Chain-Fotolia_87821369_XS-45x45.jpg 45w, /2015/02/Chain-Fotolia_87821369_XS.jpg 346w",
        "mediaDetails": {
          "height": 346,
          "width": 346
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<h2>On programming languages &amp; frameworks</h2>\n<p>It&#8217;s ok to love the framework or language you use the most. If Python is your shit, then use it like crazy. You really should get great with one thing before scattering your attention too much with others anyway.</p>\n<p>Being too attached to one language can lead to being closed to alternatives. If we don&#8217;t look outside our comfort zones, we&#8217;ll miss all the other awesome stuff. If we use a tool because we think it&#8217;s the best tool in the world, we miss other tools that might be awesome as well.</p>\n<p>Sound obvious? We&#8217;ve all met that one programmer who never shuts up about his niche technology which is out of date, that no one uses. Don&#8217;t be that guy. (I may have been that guy at one point).</p>\n<h2>On technical debates</h2>\n<p>When you really get into programming, you&#8217;ll talk shop with a lot of other technical people about things like one technology vs another. This is a big part of learning and growing as a programmer. And this will happen throughout your career.</p>\n<p>As far as debates go, it&#8217;s good to be opinionated. It&#8217;s bad to be dogmatic. There&#8217;s a fine line between the two. With the latter, you pretty much rule out any beliefs that don&#8217;t agree with yours. Which means you&#8217;ll miss out on other cool things (technologies, etc) that might really benefit you. For some this distinction is obvious; it bears mentioning since we&#8217;ve all met someone who was so addicted to their language of choice that they just couldn&#8217;t embrace a better alternative.</p>\n<p>Overall I&#8217;m advocating less attachment to any single technology or paradigm. Every technology is a tool to help us achieve something. If we get too attached to a single tool, we forget about the big picture.</p>\n<h2>What&#8217;s great about programming</h2>\n<p>Coding is a passion for many, and rightfully so: you can do great things with programming. You can power businesses. You can reach millions of people. You can change lives.</p>\n<p>For some, coding is its own reward &#8211; they just flat out enjoy doing it. They enjoy discussing it. And that&#8217;s fantastic.</p>\n<p>I fall into this only partially &#8211; I get really excited when I&#8217;m on an interesting project or new piece of tech I haven&#8217;t played with before. I get a rush out of building something people will use. When I have a finished product in front of me, I feel a sense of pride and achievement.</p>\n<h2>What sucks about programming</h2>\n<p>But then, there are parts we all dislike about programming. Like working on boring projects, which we all have to do from time to time. Like having to clean up other people&#8217;s code. Like dealing with chaos when something on production breaks. These are part of the job, and worth sucking it up in light of all the other good things.</p>\n<p>Then there are the things I hate &#8211; like the fact that sitting for 10 hours straight will kill your body in the long run, unless you&#8217;ve got a dedicated standing desk. Using computers late at night will jack up your sleep. This is the stuff that needs to be balanced out over time, or it can take away from your love of the craft.</p>\n<hr />\n<p>&nbsp;</p>\n<p>Overall I&#8217;m thankful I&#8217;ve spent years building a powerful skill that not everyone in the world has. And now knowing the parts I don&#8217;t like, I&#8217;m a big believer in balancing life with non-computer time, and I recommend that anyone do the same. Your back/eyes/sleep will thank you for it.</p>\n"
  },
  "which-programming-framework-should-i-learn": {
    "id": "cG9zdDoxMzQ=",
    "title": "Which Programming Framework Should I Learn?",
    "excerpt": "<p>These days, web frameworks are everything. Whether you’re building a startup, a data-driven app, or even a static HTML website, they’re a requirement for just about every project. (Note: By &#8220;web frameworks,&#8221; I&#8217;m lumping all different types together: server-side frameworks (Ruby on Rails, Django), HTML frameworks (Bootstrap, Zurb Foundation), or Javascript frameworks (Backbone.js, AngularJS). ) And [&hellip;]</p>\n",
    "slug": "which-programming-framework-should-i-learn",
    "date": "2015-02-25T12:39:21",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/02/Fotolia_76366107_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/02/Fotolia_76366107_XS-300x300.jpg 300w, /2015/02/Fotolia_76366107_XS-150x150.jpg 150w, /2015/02/Fotolia_76366107_XS-45x45.jpg 45w, /2015/02/Fotolia_76366107_XS.jpg 346w",
        "mediaDetails": {
          "height": 346,
          "width": 346
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Freelance Programming"
          }
        },
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>These days, web frameworks are everything. Whether you’re building a startup, a data-driven app, or even a static HTML website, they’re a requirement for just about every project.<!--more--></p>\n<p><em>(Note: By &#8220;web frameworks,&#8221; I&#8217;m lumping all different types together: server-side frameworks (Ruby on Rails, Django), HTML frameworks (Bootstrap, Zurb Foundation), or Javascript frameworks (Backbone.js, AngularJS). )</em></p>\n<p>And not to mention, they’re a requirement for a great many jobs. Aside from the junior-est of junior positions, developers are expected to know at least one and in some cases multiple web frameworks to be considered as a potential hire.</p>\n<p>Having worked with web development for quite some time now (I’m dating myself a little, but screw it), I’ve witnessed the rise and fall of programming languages and frameworks. I remember how big Prototype and MooTools were until jQuery came and dominated them all. Perl and CGI were pretty big until PHP came along. Drupal and Joomla still have communities, but are nowhere near as popular as Wordpress.</p>\n<div id=\"attachment_137\" style=\"width: 891px\" class=\"wp-caption aligncenter\"><a href=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/02/JS-Framework-Comparisons.png\"><img aria-describedby=\"caption-attachment-137\" loading=\"lazy\" class=\"wp-image-137 size-full\" src=\"http://mikecavaliere.wpengine.com/wp-content/uploads/2015/02/JS-Framework-Comparisons.png\" alt=\"Google Trends chart comparing popular Javascript frameworks.\" width=\"881\" height=\"521\" srcset=\"/2015/02/JS-Framework-Comparisons.png 881w, /2015/02/JS-Framework-Comparisons-300x177.png 300w\" sizes=\"(max-width: 881px) 100vw, 881px\" /></a><p id=\"caption-attachment-137\" class=\"wp-caption-text\">Popularity of Backbone.js vs React.js, Ember.js and AngularJS, as compared on Google Trends.</p></div>\n<p>&nbsp;</p>\n<h2>Your Favorite Framework Has An Expiration Date</h2>\n<p>It’s important to realize that no matter how awesome a technology is, it’ll be gone someday. And sooner than that, it will fall out of vogue. When that happens, the community will thin out, a bigger contender will come along and be the new (and possibly better) cool kid on the block.</p>\n<p>It’s wise to code like a Buddhist: don’t get <i>too</i> attached.</p>\n<p>As such, developers need to keep their knowledge fresh continually. Freelancers especially so, but in-house technical teams as well need to continue to experiment and always be thinking how to better their situation.</p>\n<p>But a good framework will have a 10-15 year run. So it’s important to try and place your money on the safer bets.</p>\n<h2><b>Invest in Longevity</b></h2>\n<p>It’s important to try to separate the one-hit wonders from those that will live up to the hype for a while. Technology evolves fast, and it’s hard to keep up. As smart as you are, you can’t learn everything (and you sure as hell can’t be <i>good</i> at everything). So when picking new technologies for you or your team to absorb, it makes sense to pick and choose carefully.</p>\n<p>Longevity is one of the criteria you should consider when picking which technologies to invest developer time into, and it’s not an easy one to judge. Especially when a framework is new, trying to predict how big it will be in 5-10 years may be akin to fortune telling. But you can make educated guesses by looking at things like:</p>\n<ul>\n<li>What’s it’s track record? How long has it been around?</li>\n<li>How big is the community, and how active?</li>\n<li>How much bigger than its competitors is it? One order of magnitude, or several?</li>\n<li>Does it solve a specific problem really well, or is it very, very broad? What weaknesses does it have?</li>\n<li>Who’s behind it, and how are they nurturing it? (For example: The popularity of AngularJS is probably in no small part due to being created and pushed by a tech behemoth like Google. And they’re continuing to make big moves at evolving it, so it’s unlikely that Angular will be going anywhere for a while.)</li>\n</ul>\n<h2><b>Compare and Contrast</b></h2>\n<p>Do your comparative research. Every framework, no matter how new has alternatives. The best way to see which one is the most appropriate to learn is to look at them side by side.</p>\n<p>You’ll want to rate each according to a variety of criteria that are important to you. From the technical (speed rankings, file size overhead) to the practical (overall learning curve, how well your team knows related technologies), you’ll want to make a very calculated decision on what to invest your time in.</p>\n<p>Uri Shaked has a great example of <a href=\"https://www.airpair.com/js/javascript-framework-comparison\" target=\"_blank\" rel=\"noopener\">comparative research applied to Javascript frameworks.</a> Using an approach like this before investing time learning any technology can help you invest your time wisely.</p>\n<h2><b>The Bottom Line</b></h2>\n<p>I tend to think of learning new frameworks like eating habits: I don’t eat fast food, because it’s bad for my health and is going to make me feel like crap. When picking up new technologies, it’s the same deal &#8211; learning more is always a good thing, but it pays to consciously invest the most time and energy learning things that’ll be sticking around and evolving with time.</p>\n<p>Your brain and your skillset are investments; give them the high quality stuff and they’ll thank you in the long run.</p>\n"
  },
  "why-your-developers-should-cross-train": {
    "id": "cG9zdDozMw==",
    "title": "Why Developers Should Cross-Train",
    "excerpt": "<p>I’m not a big follower of sports in general, but they can serve as a good metaphor for development. Software engineering is sometimes mistakenly thought of as one big sport; i.e., if you’re good at PHP, you must be good at Python &#8211; since they’re basically the same thing, right? Well, no. Not at all, [&hellip;]</p>\n",
    "slug": "why-your-developers-should-cross-train",
    "date": "2015-01-23T21:47:59",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/01/Fotolia_60762739_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/01/Fotolia_60762739_XS-300x300.jpg 300w, /2015/01/Fotolia_60762739_XS-150x150.jpg 150w, /2015/01/Fotolia_60762739_XS-45x45.jpg 45w, /2015/01/Fotolia_60762739_XS.jpg 346w",
        "mediaDetails": {
          "height": 346,
          "width": 346
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Developer Training"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<p>I’m not a big follower of sports in general, but they can serve as a good metaphor for development.</p>\n<p>Software engineering is sometimes mistakenly thought of as one big sport; i.e., if you’re good at PHP, you must be good at Python &#8211; since they’re basically the same thing, right?</p>\n<p><!--more--></p>\n<div></div>\n<p>Well, no. Not at all, really. If you’re a great developer who’s worked with many languages, you’ll pick new ones up way faster, sure. Since he was a basketball legend, Michael Jordan picked up baseball faster than…say, me (a very non-professional athlete), but that didn’t mean he was automatically a baseball god, or even great at it compared to those whose profession was baseball.</p>\n<p>Experience with a sport will help you get good at another sport. But they’re not automatically interchangeable.</p>\n<p>Software engineering is similar. It’s not one big sport; it’s a collection of sports, each which focuses on different skillets. Client-side languages are very different than server-side languages. Mobile development has many of its own traits. Front-end and back-end development share some qualities, but are in many ways very different worlds.</p>\n<p>That said, I’m a big proponent of having developers have one area of specialization (front-end, backend or mobile for example). But they should definitely dabble in the others.</p>\n<h2>Benefits of developer cross-training</h2>\n<p>Here are some of the benefits of having developers spend time outside their specialties:</p>\n<div></div>\n<ul>\n<li><b>Empathy.</b> Different types of devs have to work together on any given product; trying on each others shoes can make them understand each others&#8217; challenges better and therefore increase team cohesion.</li>\n<li><b>Communication.</b> If a dev has experimented with other specialties, she can speak the lingo better and understand concepts that devs in other areas approach them with.</li>\n<li><b>Improving the core skill set.</b> A front-end dev will get even <b>better</b> at front-end when she’s tried out some back-end coding and/or mobile. The javascript code he writes needs to make ajax calls to the backend, or may have to run within a an iOS web view; each of those situations will have its own unique challenges. So experimenting with the technologies that interact with his code will ultimately improve the front-end code that he writes.</li>\n<li><b>Possible specialization changes.</b> Someone may be a Django developer and not realize that they have a true love for mobile until they try it out.</li>\n<li><b>Improving the brain.</b> This may seem outside of the discussion of technology, but it shouldn’t be. The more diversity in the types of things we learn, the more we increase our capacity for learning, reduce our risk of things like alzheimer’s disease and general cognitive decline. A healthy brain long-term means quality development work long-term.</li>\n</ul>\n<h2>How to cross-train developers</h2>\n<p>Getting cross-training in can take a number of forms. Two that come to mind are:</p>\n<ul>\n<li><b>Group show and tell sessions.</b> Devs can take turns demoing features they’ve written and explaining how they work.</li>\n<li><b>Study time &amp; peer review.</b> Devs of different skillets pair up. Each dev takes on a small project involving the other dev&#8217;s skill set. After they both write something functional, they review each other’s work and make corrections.</li>\n</ul>\n<div>So those are some of the benefits of and strategies for developer cross-training. Note that you don’t need to invest more than a few hours per week (even for just a few weeks) to get some kind of result out of this. And long-term, it will benefit the cumulative skill level of the team.</div>\n<div></div>\n"
  },
  "building-an-all-offline-web-app": {
    "id": "cG9zdDoxMTE=",
    "title": "Building an All-Offline Web App",
    "excerpt": "<p>I recently completed an all-offline mobile web app for a client. I was quite proud of the finished product, but had a few realizations about the state of offline web applications that  I thought were worth sharing. Below are some of the insights I took away from the experience. Insight #1: Offline capabilities are different across [&hellip;]</p>\n",
    "slug": "building-an-all-offline-web-app",
    "date": "2015-01-19T00:48:01",
    "featuredImage": {
      "node": {
        "sourceUrl": "/2015/01/No-Wifi-Fotolia_84804118_XS.jpg",
        "altText": "",
        "description": null,
        "sizes": "(max-width: 300px) 100vw, 300px",
        "srcSet": "/2015/01/No-Wifi-Fotolia_84804118_XS-300x300.jpg 300w, /2015/01/No-Wifi-Fotolia_84804118_XS-150x150.jpg 150w, /2015/01/No-Wifi-Fotolia_84804118_XS-45x45.jpg 45w, /2015/01/No-Wifi-Fotolia_84804118_XS.jpg 346w",
        "mediaDetails": {
          "height": 346,
          "width": 346
        }
      }
    },
    "author": {
      "node": {
        "name": "Mike Cavaliere",
        "firstName": "Mike",
        "lastName": "Cavaliere",
        "avatar": {
          "url": "https://secure.gravatar.com/avatar/b311713ff6de02a7b88c2e9f63d2ea45?s=96&r=pg"
        }
      }
    },
    "categories": {
      "edges": [
        {
          "node": {
            "name": "Web Development"
          }
        }
      ]
    },
    "tags": {
      "edges": []
    },
    "content": "<div>I recently completed an all-offline mobile web app for a client. I was quite proud of the finished product, but had a few realizations about the state of offline web applications that  I thought were worth sharing.</div>\n<p><!--more--></p>\n<div></div>\n<div>Below are some of the insights I took away from the experience.</div>\n<div></div>\n<h3>Insight #1: Offline capabilities are different across devices and browsers.</h3>\n<p>If you want things to work well across different devices and browsers, don’t make your app dependent on offline capability; use it sparingly. On the other hand, if you really need deep functionality (i.e., you want your app to work completely offline), be prepared to be very specific about the devices you’re targeting, and very limited in functionality.</p>\n<p>In this client’s case, the app we built was a prototype. They wanted full offline functionality, but we only had to cater toward iOS 8 (specifically on a full-sized iPad) and Internet Explorer 10/11 on desktop.</p>\n<h3>Insight #2: Offline database technology is fragmented.</h3>\n<p>There are too many database technologies. Local storage has size limits. If you want to store data beyond a few MB, you’ll have to rely on the browser’s offline database technology, which is different from browser to browser. IndexedDB isn’t well supported in iOS; WebSQL isn’t supported in IE or Firefox, and is being phased out entirely. Solutions like PouchDB are great attempts at working around this, but may not work in some cases and still have cross-browser problems.</p>\n<h3>Insight #3: Proprietary quirks exist.</h3>\n<p>In this last project we used several of apple’s Safari features for running a web app like a native app. We ran into surprises.</p>\n<ul>\n<li>Some of Safari’s custom meta tags not behaving as specified</li>\n<li>“Full screen mode” apps having their own storage and cache. This is a great idea, but wasn’t well documented by apple.</li>\n</ul>\n<p>This at the previous insight are reminiscent of what I&#8217;ve seen in front-end development throughout my whole career: as long as browsers are made by different manufacturers, front-end development will remain challenging.</p>\n<h3>Insight #4: True offline debugging can be a real challenge.</h3>\n<p>Once you put your iOS device into Airplane Mode, you can’t debug from your laptop anymore. And since “full screen mode” apps (i.e., mobile web apps) behave a little differently than apps you view directly with the browser (see the last bullet), this makes developers unable to test offline apps completely reliably, and therefore our finished product may be unpredictable.</p>\n<p>Application manifests (the document that tells the app which files to save offline) also have many complexities that make it challenging both to develop and debug. <a href=\"http://alistapart.com/article/application-cache-is-a-douchebag\">Application Cache is a D-bag</a> talks about some of them without pulling any punches.</p>\n<h3>Insight #5: Offline web apps are complex.</h3>\n<p>An offline web app has as many moving pieces as a normal web app, with a few more related to connectivity and the state of the data that is on the user&#8217;s device. You have to plan out how the app will look and behave under a few situations that you don&#8217;t have to consider with a more traditional app.</p>\n<p>For example, should you store just the html offline, or images and javascript as well? If the app runs offline, and makes an AJAX request to something that isn&#8217;t cached, is the JS set to fail gracefully? If the content manifest downloads in the background while we&#8217;re online, should we swap it out, even though the page is already rendered? If so, do we need to update the DOM based on the manifest&#8217;s contents?</p>\n<hr />\n<h3>Summary</h3>\n<div>All in all, making your app function offline in some portion can be a very powerful thing if your business case warrants it. Just be sure you plan things accordingly and are talking to someone with knowledge of the limitations of offline applications as you are designing your app.</div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n"
  }
}