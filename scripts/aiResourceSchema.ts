// Generated by ts-to-zod
import { z } from "zod";

export const aIResourceCategorySchema = z
  .union([
    z.literal("libraries"),
    z.literal("tools"),
    z.literal("projects"),
    z.literal("articles"),
    z.literal("learning"),
  ])
  .describe("The category of the project. A project category MUST come from this list.");

export const aIResourceTagSchema = z
  .union([
    z.literal("browser"),
    z.literal("sdk"),
    z.literal("machine learning"),
    z.literal("framework"),
    z.literal("low-code"),
    z.literal("video"),
    z.literal("article"),
    z.literal("rag"),
    z.literal("saas app"),
    z.literal("prompt engineering"),
    z.literal("learning resource"),
  ])
  .describe("Possible tags for the project. All project tags MUST come from this list.");

export const sQLDateStringSchema = z
  .string()
  .regex(/^\d{4}-\d{2}-\d{2}$/)
  .describe(
    "The date this item was added to the AI resources list. Default to today. Uses MySQL date format.",
  );

export const aIResourceBaseSchema = z.object({
  name: z.string().describe("The name of the project/"),
  description: z.string().describe("A one-sentence description of the project."),
  tags: z.array(aIResourceTagSchema).optional().describe("Tags for the project."),
  category: aIResourceCategorySchema,
  addedOn: sQLDateStringSchema,
  notes: z.string().optional(),
});

export const aIResourceWithWebsiteSchema = aIResourceBaseSchema.and(
  z.object({
    websiteUrl: z.string(),
    githubUrl: z.string().optional(),
  }),
);

export const aIResourceWithGithubSchema = aIResourceBaseSchema.and(
  z.object({
    githubUrl: z.string(),
    websiteUrl: z.string().optional(),
  }),
);

export const aIResourceSchema = z.union([aIResourceWithWebsiteSchema, aIResourceWithGithubSchema]);
